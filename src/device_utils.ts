/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";

export const protobufPackage = "device_utils";

export interface Browser {
  version: string;
  name: string;
  userAgent: string;
  brandHeader: string;
  tlsFingerprint: Browser_TLSFingerprint | undefined;
}

export interface Browser_TLSFingerprint {
  version: Browser_TLSFingerprint_ProtocolVersion;
  cipherSuites: Browser_TLSFingerprint_CipherSuite[];
  extensions: Browser_TLSFingerprint_Extensions[];
  ellipticCurves: Browser_TLSFingerprint_EllipticCurve[];
  ellipticCurvePointFormats: Browser_TLSFingerprint_EllipticCurvePointFormat[];
}

/**
 * - RFC 5246 (TLS 1.2): https://tools.ietf.org/html/rfc5246
 * - RFC 6101 (SSL 3.0): https://tools.ietf.org/html/rfc6101
 * https://github.com/openssl/openssl/blob/c04e78f0c69201226430fed14c291c281da47f2d/include/openssl/prov_ssl.h
 */
export enum Browser_TLSFingerprint_ProtocolVersion {
  UNKNOWN = 0,
  SSL3 = 768,
  TLS1 = 769,
  TLS1_1 = 770,
  TLS1_2 = 771,
  TLS1_3 = 772,
  DTLS1 = 65279,
  DTLS1_2 = 65277,
  DTLS1_BAD = 256,
  UNRECOGNIZED = -1,
}

export function browser_TLSFingerprint_ProtocolVersionFromJSON(object: any): Browser_TLSFingerprint_ProtocolVersion {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return Browser_TLSFingerprint_ProtocolVersion.UNKNOWN;
    case 768:
    case "SSL3":
      return Browser_TLSFingerprint_ProtocolVersion.SSL3;
    case 769:
    case "TLS1":
      return Browser_TLSFingerprint_ProtocolVersion.TLS1;
    case 770:
    case "TLS1_1":
      return Browser_TLSFingerprint_ProtocolVersion.TLS1_1;
    case 771:
    case "TLS1_2":
      return Browser_TLSFingerprint_ProtocolVersion.TLS1_2;
    case 772:
    case "TLS1_3":
      return Browser_TLSFingerprint_ProtocolVersion.TLS1_3;
    case 65279:
    case "DTLS1":
      return Browser_TLSFingerprint_ProtocolVersion.DTLS1;
    case 65277:
    case "DTLS1_2":
      return Browser_TLSFingerprint_ProtocolVersion.DTLS1_2;
    case 256:
    case "DTLS1_BAD":
      return Browser_TLSFingerprint_ProtocolVersion.DTLS1_BAD;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Browser_TLSFingerprint_ProtocolVersion.UNRECOGNIZED;
  }
}

export function browser_TLSFingerprint_ProtocolVersionToJSON(object: Browser_TLSFingerprint_ProtocolVersion): string {
  switch (object) {
    case Browser_TLSFingerprint_ProtocolVersion.UNKNOWN:
      return "UNKNOWN";
    case Browser_TLSFingerprint_ProtocolVersion.SSL3:
      return "SSL3";
    case Browser_TLSFingerprint_ProtocolVersion.TLS1:
      return "TLS1";
    case Browser_TLSFingerprint_ProtocolVersion.TLS1_1:
      return "TLS1_1";
    case Browser_TLSFingerprint_ProtocolVersion.TLS1_2:
      return "TLS1_2";
    case Browser_TLSFingerprint_ProtocolVersion.TLS1_3:
      return "TLS1_3";
    case Browser_TLSFingerprint_ProtocolVersion.DTLS1:
      return "DTLS1";
    case Browser_TLSFingerprint_ProtocolVersion.DTLS1_2:
      return "DTLS1_2";
    case Browser_TLSFingerprint_ProtocolVersion.DTLS1_BAD:
      return "DTLS1_BAD";
    case Browser_TLSFingerprint_ProtocolVersion.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** - TLS cipher-suites: https://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml#tls-parameters-4 */
export enum Browser_TLSFingerprint_CipherSuite {
  TLS_NULL_WITH_NULL_NULL = 0,
  TLS_RSA_WITH_NULL_MD5 = 1,
  TLS_RSA_WITH_NULL_SHA = 2,
  TLS_RSA_EXPORT_WITH_RC4_40_MD5 = 3,
  TLS_RSA_WITH_RC4_128_MD5 = 4,
  TLS_RSA_WITH_RC4_128_SHA = 5,
  TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5 = 6,
  TLS_RSA_WITH_IDEA_CBC_SHA = 7,
  TLS_RSA_EXPORT_WITH_DES40_CBC_SHA = 8,
  TLS_RSA_WITH_DES_CBC_SHA = 9,
  TLS_RSA_WITH_3DES_EDE_CBC_SHA = 10,
  TLS_DH_DSS_EXPORT_WITH_DES40_CBC_SHA = 11,
  TLS_DH_DSS_WITH_DES_CBC_SHA = 12,
  TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA = 13,
  TLS_DH_RSA_EXPORT_WITH_DES40_CBC_SHA = 14,
  TLS_DH_RSA_WITH_DES_CBC_SHA = 15,
  TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA = 16,
  TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA = 17,
  TLS_DHE_DSS_WITH_DES_CBC_SHA = 18,
  TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA = 19,
  TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA = 20,
  TLS_DHE_RSA_WITH_DES_CBC_SHA = 21,
  TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA = 22,
  TLS_DH_anon_EXPORT_WITH_RC4_40_MD5 = 23,
  TLS_DH_anon_WITH_RC4_128_MD5 = 24,
  TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA = 25,
  TLS_DH_anon_WITH_DES_CBC_SHA = 26,
  TLS_DH_anon_WITH_3DES_EDE_CBC_SHA = 27,
  TLS_KRB5_WITH_DES_CBC_SHA = 30,
  TLS_KRB5_WITH_3DES_EDE_CBC_SHA = 31,
  TLS_KRB5_WITH_RC4_128_SHA = 32,
  TLS_KRB5_WITH_IDEA_CBC_SHA = 33,
  TLS_KRB5_WITH_DES_CBC_MD5 = 34,
  TLS_KRB5_WITH_3DES_EDE_CBC_MD5 = 35,
  TLS_KRB5_WITH_RC4_128_MD5 = 36,
  TLS_KRB5_WITH_IDEA_CBC_MD5 = 37,
  TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA = 38,
  TLS_KRB5_EXPORT_WITH_RC2_CBC_40_SHA = 39,
  TLS_KRB5_EXPORT_WITH_RC4_40_SHA = 40,
  TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5 = 41,
  TLS_KRB5_EXPORT_WITH_RC2_CBC_40_MD5 = 42,
  TLS_KRB5_EXPORT_WITH_RC4_40_MD5 = 43,
  TLS_PSK_WITH_NULL_SHA = 44,
  TLS_DHE_PSK_WITH_NULL_SHA = 45,
  TLS_RSA_PSK_WITH_NULL_SHA = 46,
  TLS_RSA_WITH_AES_128_CBC_SHA = 47,
  TLS_DH_DSS_WITH_AES_128_CBC_SHA = 48,
  TLS_DH_RSA_WITH_AES_128_CBC_SHA = 49,
  TLS_DHE_DSS_WITH_AES_128_CBC_SHA = 50,
  TLS_DHE_RSA_WITH_AES_128_CBC_SHA = 51,
  TLS_DH_anon_WITH_AES_128_CBC_SHA = 52,
  TLS_RSA_WITH_AES_256_CBC_SHA = 53,
  TLS_DH_DSS_WITH_AES_256_CBC_SHA = 54,
  TLS_DH_RSA_WITH_AES_256_CBC_SHA = 55,
  TLS_DHE_DSS_WITH_AES_256_CBC_SHA = 56,
  TLS_DHE_RSA_WITH_AES_256_CBC_SHA = 57,
  TLS_DH_anon_WITH_AES_256_CBC_SHA = 58,
  TLS_RSA_WITH_NULL_SHA256 = 59,
  TLS_RSA_WITH_AES_128_CBC_SHA256 = 60,
  TLS_RSA_WITH_AES_256_CBC_SHA256 = 61,
  TLS_DH_DSS_WITH_AES_128_CBC_SHA256 = 62,
  TLS_DH_RSA_WITH_AES_128_CBC_SHA256 = 63,
  TLS_DHE_DSS_WITH_AES_128_CBC_SHA256 = 64,
  TLS_RSA_WITH_CAMELLIA_128_CBC_SHA = 65,
  TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA = 66,
  TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA = 67,
  TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA = 68,
  TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA = 69,
  TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA = 70,
  TLS_DHE_RSA_WITH_AES_128_CBC_SHA256 = 103,
  TLS_DH_DSS_WITH_AES_256_CBC_SHA256 = 104,
  TLS_DH_RSA_WITH_AES_256_CBC_SHA256 = 105,
  TLS_DHE_DSS_WITH_AES_256_CBC_SHA256 = 106,
  TLS_DHE_RSA_WITH_AES_256_CBC_SHA256 = 107,
  TLS_DH_anon_WITH_AES_128_CBC_SHA256 = 108,
  TLS_DH_anon_WITH_AES_256_CBC_SHA256 = 109,
  TLS_RSA_WITH_CAMELLIA_256_CBC_SHA = 132,
  TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA = 133,
  TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA = 134,
  TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA = 135,
  TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA = 136,
  TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA = 137,
  TLS_PSK_WITH_RC4_128_SHA = 138,
  TLS_PSK_WITH_3DES_EDE_CBC_SHA = 139,
  TLS_PSK_WITH_AES_128_CBC_SHA = 140,
  TLS_PSK_WITH_AES_256_CBC_SHA = 141,
  TLS_DHE_PSK_WITH_RC4_128_SHA = 142,
  TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA = 143,
  TLS_DHE_PSK_WITH_AES_128_CBC_SHA = 144,
  TLS_DHE_PSK_WITH_AES_256_CBC_SHA = 145,
  TLS_RSA_PSK_WITH_RC4_128_SHA = 146,
  TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA = 147,
  TLS_RSA_PSK_WITH_AES_128_CBC_SHA = 148,
  TLS_RSA_PSK_WITH_AES_256_CBC_SHA = 149,
  TLS_RSA_WITH_SEED_CBC_SHA = 150,
  TLS_DH_DSS_WITH_SEED_CBC_SHA = 151,
  TLS_DH_RSA_WITH_SEED_CBC_SHA = 152,
  TLS_DHE_DSS_WITH_SEED_CBC_SHA = 153,
  TLS_DHE_RSA_WITH_SEED_CBC_SHA = 154,
  TLS_DH_anon_WITH_SEED_CBC_SHA = 155,
  TLS_RSA_WITH_AES_128_GCM_SHA256 = 156,
  TLS_RSA_WITH_AES_256_GCM_SHA384 = 157,
  TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 = 158,
  TLS_DHE_RSA_WITH_AES_256_GCM_SHA384 = 159,
  TLS_DH_RSA_WITH_AES_128_GCM_SHA256 = 160,
  TLS_DH_RSA_WITH_AES_256_GCM_SHA384 = 161,
  TLS_DHE_DSS_WITH_AES_128_GCM_SHA256 = 162,
  TLS_DHE_DSS_WITH_AES_256_GCM_SHA384 = 163,
  TLS_DH_DSS_WITH_AES_128_GCM_SHA256 = 164,
  TLS_DH_DSS_WITH_AES_256_GCM_SHA384 = 165,
  TLS_DH_anon_WITH_AES_128_GCM_SHA256 = 166,
  TLS_DH_anon_WITH_AES_256_GCM_SHA384 = 167,
  TLS_PSK_WITH_AES_128_GCM_SHA256 = 168,
  TLS_PSK_WITH_AES_256_GCM_SHA384 = 169,
  TLS_DHE_PSK_WITH_AES_128_GCM_SHA256 = 170,
  TLS_DHE_PSK_WITH_AES_256_GCM_SHA384 = 171,
  TLS_RSA_PSK_WITH_AES_128_GCM_SHA256 = 172,
  TLS_RSA_PSK_WITH_AES_256_GCM_SHA384 = 173,
  TLS_PSK_WITH_AES_128_CBC_SHA256 = 174,
  TLS_PSK_WITH_AES_256_CBC_SHA384 = 175,
  TLS_PSK_WITH_NULL_SHA256 = 176,
  TLS_PSK_WITH_NULL_SHA384 = 177,
  TLS_DHE_PSK_WITH_AES_128_CBC_SHA256 = 178,
  TLS_DHE_PSK_WITH_AES_256_CBC_SHA384 = 179,
  TLS_DHE_PSK_WITH_NULL_SHA256 = 180,
  TLS_DHE_PSK_WITH_NULL_SHA384 = 181,
  TLS_RSA_PSK_WITH_AES_128_CBC_SHA256 = 182,
  TLS_RSA_PSK_WITH_AES_256_CBC_SHA384 = 183,
  TLS_RSA_PSK_WITH_NULL_SHA256 = 184,
  TLS_RSA_PSK_WITH_NULL_SHA384 = 185,
  TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256 = 186,
  TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256 = 187,
  TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256 = 188,
  TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256 = 189,
  TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256 = 190,
  TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA256 = 191,
  TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256 = 192,
  TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256 = 193,
  TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256 = 194,
  TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256 = 195,
  TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256 = 196,
  TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA256 = 197,
  TLS_SM4_GCM_SM3 = 198,
  TLS_SM4_CCM_SM3 = 199,
  TLS_EMPTY_RENEGOTIATION_INFO_SCSV = 255,
  Reserved = 2570,
  Unassigned = 4864,
  TLS_AES_128_GCM_SHA256 = 4865,
  TLS_AES_256_GCM_SHA384 = 4866,
  TLS_CHACHA20_POLY1305_SHA256 = 4867,
  TLS_AES_128_CCM_SHA256 = 4868,
  TLS_AES_128_CCM_8_SHA256 = 4869,
  TLS_AEGIS_256_SHA384 = 4870,
  TLS_AEGIS_128L_SHA256 = 4871,
  TLS_FALLBACK_SCSV = 22016,
  TLS_ECDH_ECDSA_WITH_NULL_SHA = 49153,
  TLS_ECDH_ECDSA_WITH_RC4_128_SHA = 49154,
  TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA = 49155,
  TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA = 49156,
  TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA = 49157,
  TLS_ECDHE_ECDSA_WITH_NULL_SHA = 49158,
  TLS_ECDHE_ECDSA_WITH_RC4_128_SHA = 49159,
  TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA = 49160,
  TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA = 49161,
  TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA = 49162,
  TLS_ECDH_RSA_WITH_NULL_SHA = 49163,
  TLS_ECDH_RSA_WITH_RC4_128_SHA = 49164,
  TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA = 49165,
  TLS_ECDH_RSA_WITH_AES_128_CBC_SHA = 49166,
  TLS_ECDH_RSA_WITH_AES_256_CBC_SHA = 49167,
  TLS_ECDHE_RSA_WITH_NULL_SHA = 49168,
  TLS_ECDHE_RSA_WITH_RC4_128_SHA = 49169,
  TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA = 49170,
  TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA = 49171,
  TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA = 49172,
  TLS_ECDH_anon_WITH_NULL_SHA = 49173,
  TLS_ECDH_anon_WITH_RC4_128_SHA = 49174,
  TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA = 49175,
  TLS_ECDH_anon_WITH_AES_128_CBC_SHA = 49176,
  TLS_ECDH_anon_WITH_AES_256_CBC_SHA = 49177,
  TLS_SRP_SHA_WITH_3DES_EDE_CBC_SHA = 49178,
  TLS_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA = 49179,
  TLS_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA = 49180,
  TLS_SRP_SHA_WITH_AES_128_CBC_SHA = 49181,
  TLS_SRP_SHA_RSA_WITH_AES_128_CBC_SHA = 49182,
  TLS_SRP_SHA_DSS_WITH_AES_128_CBC_SHA = 49183,
  TLS_SRP_SHA_WITH_AES_256_CBC_SHA = 49184,
  TLS_SRP_SHA_RSA_WITH_AES_256_CBC_SHA = 49185,
  TLS_SRP_SHA_DSS_WITH_AES_256_CBC_SHA = 49186,
  TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 = 49187,
  TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384 = 49188,
  TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256 = 49189,
  TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384 = 49190,
  TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 = 49191,
  TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 = 49192,
  TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256 = 49193,
  TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384 = 49194,
  TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 = 49195,
  TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 = 49196,
  TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256 = 49197,
  TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384 = 49198,
  TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 = 49199,
  TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 = 49200,
  TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256 = 49201,
  TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384 = 49202,
  TLS_ECDHE_PSK_WITH_RC4_128_SHA = 49203,
  TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA = 49204,
  TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA = 49205,
  TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA = 49206,
  TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256 = 49207,
  TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384 = 49208,
  TLS_ECDHE_PSK_WITH_NULL_SHA = 49209,
  TLS_ECDHE_PSK_WITH_NULL_SHA256 = 49210,
  TLS_ECDHE_PSK_WITH_NULL_SHA384 = 49211,
  TLS_RSA_WITH_ARIA_128_CBC_SHA256 = 49212,
  TLS_RSA_WITH_ARIA_256_CBC_SHA384 = 49213,
  TLS_DH_DSS_WITH_ARIA_128_CBC_SHA256 = 49214,
  TLS_DH_DSS_WITH_ARIA_256_CBC_SHA384 = 49215,
  TLS_DH_RSA_WITH_ARIA_128_CBC_SHA256 = 49216,
  TLS_DH_RSA_WITH_ARIA_256_CBC_SHA384 = 49217,
  TLS_DHE_DSS_WITH_ARIA_128_CBC_SHA256 = 49218,
  TLS_DHE_DSS_WITH_ARIA_256_CBC_SHA384 = 49219,
  TLS_DHE_RSA_WITH_ARIA_128_CBC_SHA256 = 49220,
  TLS_DHE_RSA_WITH_ARIA_256_CBC_SHA384 = 49221,
  TLS_DH_anon_WITH_ARIA_128_CBC_SHA256 = 49222,
  TLS_DH_anon_WITH_ARIA_256_CBC_SHA384 = 49223,
  TLS_ECDHE_ECDSA_WITH_ARIA_128_CBC_SHA256 = 49224,
  TLS_ECDHE_ECDSA_WITH_ARIA_256_CBC_SHA384 = 49225,
  TLS_ECDH_ECDSA_WITH_ARIA_128_CBC_SHA256 = 49226,
  TLS_ECDH_ECDSA_WITH_ARIA_256_CBC_SHA384 = 49227,
  TLS_ECDHE_RSA_WITH_ARIA_128_CBC_SHA256 = 49228,
  TLS_ECDHE_RSA_WITH_ARIA_256_CBC_SHA384 = 49229,
  TLS_ECDH_RSA_WITH_ARIA_128_CBC_SHA256 = 49230,
  TLS_ECDH_RSA_WITH_ARIA_256_CBC_SHA384 = 49231,
  TLS_RSA_WITH_ARIA_128_GCM_SHA256 = 49232,
  TLS_RSA_WITH_ARIA_256_GCM_SHA384 = 49233,
  TLS_DHE_RSA_WITH_ARIA_128_GCM_SHA256 = 49234,
  TLS_DHE_RSA_WITH_ARIA_256_GCM_SHA384 = 49235,
  TLS_DH_RSA_WITH_ARIA_128_GCM_SHA256 = 49236,
  TLS_DH_RSA_WITH_ARIA_256_GCM_SHA384 = 49237,
  TLS_DHE_DSS_WITH_ARIA_128_GCM_SHA256 = 49238,
  TLS_DHE_DSS_WITH_ARIA_256_GCM_SHA384 = 49239,
  TLS_DH_DSS_WITH_ARIA_128_GCM_SHA256 = 49240,
  TLS_DH_DSS_WITH_ARIA_256_GCM_SHA384 = 49241,
  TLS_DH_anon_WITH_ARIA_128_GCM_SHA256 = 49242,
  TLS_DH_anon_WITH_ARIA_256_GCM_SHA384 = 49243,
  TLS_ECDHE_ECDSA_WITH_ARIA_128_GCM_SHA256 = 49244,
  TLS_ECDHE_ECDSA_WITH_ARIA_256_GCM_SHA384 = 49245,
  TLS_ECDH_ECDSA_WITH_ARIA_128_GCM_SHA256 = 49246,
  TLS_ECDH_ECDSA_WITH_ARIA_256_GCM_SHA384 = 49247,
  TLS_ECDHE_RSA_WITH_ARIA_128_GCM_SHA256 = 49248,
  TLS_ECDHE_RSA_WITH_ARIA_256_GCM_SHA384 = 49249,
  TLS_ECDH_RSA_WITH_ARIA_128_GCM_SHA256 = 49250,
  TLS_ECDH_RSA_WITH_ARIA_256_GCM_SHA384 = 49251,
  TLS_PSK_WITH_ARIA_128_CBC_SHA256 = 49252,
  TLS_PSK_WITH_ARIA_256_CBC_SHA384 = 49253,
  TLS_DHE_PSK_WITH_ARIA_128_CBC_SHA256 = 49254,
  TLS_DHE_PSK_WITH_ARIA_256_CBC_SHA384 = 49255,
  TLS_RSA_PSK_WITH_ARIA_128_CBC_SHA256 = 49256,
  TLS_RSA_PSK_WITH_ARIA_256_CBC_SHA384 = 49257,
  TLS_PSK_WITH_ARIA_128_GCM_SHA256 = 49258,
  TLS_PSK_WITH_ARIA_256_GCM_SHA384 = 49259,
  TLS_DHE_PSK_WITH_ARIA_128_GCM_SHA256 = 49260,
  TLS_DHE_PSK_WITH_ARIA_256_GCM_SHA384 = 49261,
  TLS_RSA_PSK_WITH_ARIA_128_GCM_SHA256 = 49262,
  TLS_RSA_PSK_WITH_ARIA_256_GCM_SHA384 = 49263,
  TLS_ECDHE_PSK_WITH_ARIA_128_CBC_SHA256 = 49264,
  TLS_ECDHE_PSK_WITH_ARIA_256_CBC_SHA384 = 49265,
  TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256 = 49266,
  TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384 = 49267,
  TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256 = 49268,
  TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384 = 49269,
  TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256 = 49270,
  TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384 = 49271,
  TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256 = 49272,
  TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384 = 49273,
  TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256 = 49274,
  TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384 = 49275,
  TLS_DHE_RSA_WITH_CAMELLIA_128_GCM_SHA256 = 49276,
  TLS_DHE_RSA_WITH_CAMELLIA_256_GCM_SHA384 = 49277,
  TLS_DH_RSA_WITH_CAMELLIA_128_GCM_SHA256 = 49278,
  TLS_DH_RSA_WITH_CAMELLIA_256_GCM_SHA384 = 49279,
  TLS_DHE_DSS_WITH_CAMELLIA_128_GCM_SHA256 = 49280,
  TLS_DHE_DSS_WITH_CAMELLIA_256_GCM_SHA384 = 49281,
  TLS_DH_DSS_WITH_CAMELLIA_128_GCM_SHA256 = 49282,
  TLS_DH_DSS_WITH_CAMELLIA_256_GCM_SHA384 = 49283,
  TLS_DH_anon_WITH_CAMELLIA_128_GCM_SHA256 = 49284,
  TLS_DH_anon_WITH_CAMELLIA_256_GCM_SHA384 = 49285,
  TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256 = 49286,
  TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_GCM_SHA384 = 49287,
  TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256 = 49288,
  TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384 = 49289,
  TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256 = 49290,
  TLS_ECDHE_RSA_WITH_CAMELLIA_256_GCM_SHA384 = 49291,
  TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256 = 49292,
  TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384 = 49293,
  TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256 = 49294,
  TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384 = 49295,
  TLS_DHE_PSK_WITH_CAMELLIA_128_GCM_SHA256 = 49296,
  TLS_DHE_PSK_WITH_CAMELLIA_256_GCM_SHA384 = 49297,
  TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256 = 49298,
  TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384 = 49299,
  TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256 = 49300,
  TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384 = 49301,
  TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256 = 49302,
  TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384 = 49303,
  TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256 = 49304,
  TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384 = 49305,
  TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256 = 49306,
  TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384 = 49307,
  TLS_RSA_WITH_AES_128_CCM = 49308,
  TLS_RSA_WITH_AES_256_CCM = 49309,
  TLS_DHE_RSA_WITH_AES_128_CCM = 49310,
  TLS_DHE_RSA_WITH_AES_256_CCM = 49311,
  TLS_RSA_WITH_AES_128_CCM_8 = 49312,
  TLS_RSA_WITH_AES_256_CCM_8 = 49313,
  TLS_DHE_RSA_WITH_AES_128_CCM_8 = 49314,
  TLS_DHE_RSA_WITH_AES_256_CCM_8 = 49315,
  TLS_PSK_WITH_AES_128_CCM = 49316,
  TLS_PSK_WITH_AES_256_CCM = 49317,
  TLS_DHE_PSK_WITH_AES_128_CCM = 49318,
  TLS_DHE_PSK_WITH_AES_256_CCM = 49319,
  TLS_PSK_WITH_AES_128_CCM_8 = 49320,
  TLS_PSK_WITH_AES_256_CCM_8 = 49321,
  TLS_PSK_DHE_WITH_AES_128_CCM_8 = 49322,
  TLS_PSK_DHE_WITH_AES_256_CCM_8 = 49323,
  TLS_ECDHE_ECDSA_WITH_AES_128_CCM = 49324,
  TLS_ECDHE_ECDSA_WITH_AES_256_CCM = 49325,
  TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8 = 49326,
  TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8 = 49327,
  TLS_ECCPWD_WITH_AES_128_GCM_SHA256 = 49328,
  TLS_ECCPWD_WITH_AES_256_GCM_SHA384 = 49329,
  TLS_ECCPWD_WITH_AES_128_CCM_SHA256 = 49330,
  TLS_ECCPWD_WITH_AES_256_CCM_SHA384 = 49331,
  TLS_SHA256_SHA256 = 49332,
  TLS_SHA384_SHA384 = 49333,
  TLS_GOSTR341112_256_WITH_KUZNYECHIK_CTR_OMAC = 49408,
  TLS_GOSTR341112_256_WITH_MAGMA_CTR_OMAC = 49409,
  TLS_GOSTR341112_256_WITH_28147_CNT_IMIT = 49410,
  TLS_GOSTR341112_256_WITH_KUZNYECHIK_MGM_L = 49411,
  TLS_GOSTR341112_256_WITH_MAGMA_MGM_L = 49412,
  TLS_GOSTR341112_256_WITH_KUZNYECHIK_MGM_S = 49413,
  TLS_GOSTR341112_256_WITH_MAGMA_MGM_S = 49414,
  TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256 = 52392,
  TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 = 52393,
  TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256 = 52394,
  TLS_PSK_WITH_CHACHA20_POLY1305_SHA256 = 52395,
  TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256 = 52396,
  TLS_DHE_PSK_WITH_CHACHA20_POLY1305_SHA256 = 52397,
  TLS_RSA_PSK_WITH_CHACHA20_POLY1305_SHA256 = 52398,
  TLS_ECDHE_PSK_WITH_AES_128_GCM_SHA256 = 53249,
  TLS_ECDHE_PSK_WITH_AES_256_GCM_SHA384 = 53250,
  TLS_ECDHE_PSK_WITH_AES_128_CCM_8_SHA256 = 53251,
  TLS_ECDHE_PSK_WITH_AES_128_CCM_SHA256 = 53253,
  UNRECOGNIZED = -1,
}

export function browser_TLSFingerprint_CipherSuiteFromJSON(object: any): Browser_TLSFingerprint_CipherSuite {
  switch (object) {
    case 0:
    case "TLS_NULL_WITH_NULL_NULL":
      return Browser_TLSFingerprint_CipherSuite.TLS_NULL_WITH_NULL_NULL;
    case 1:
    case "TLS_RSA_WITH_NULL_MD5":
      return Browser_TLSFingerprint_CipherSuite.TLS_RSA_WITH_NULL_MD5;
    case 2:
    case "TLS_RSA_WITH_NULL_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_RSA_WITH_NULL_SHA;
    case 3:
    case "TLS_RSA_EXPORT_WITH_RC4_40_MD5":
      return Browser_TLSFingerprint_CipherSuite.TLS_RSA_EXPORT_WITH_RC4_40_MD5;
    case 4:
    case "TLS_RSA_WITH_RC4_128_MD5":
      return Browser_TLSFingerprint_CipherSuite.TLS_RSA_WITH_RC4_128_MD5;
    case 5:
    case "TLS_RSA_WITH_RC4_128_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_RSA_WITH_RC4_128_SHA;
    case 6:
    case "TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5":
      return Browser_TLSFingerprint_CipherSuite.TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5;
    case 7:
    case "TLS_RSA_WITH_IDEA_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_RSA_WITH_IDEA_CBC_SHA;
    case 8:
    case "TLS_RSA_EXPORT_WITH_DES40_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_RSA_EXPORT_WITH_DES40_CBC_SHA;
    case 9:
    case "TLS_RSA_WITH_DES_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_RSA_WITH_DES_CBC_SHA;
    case 10:
    case "TLS_RSA_WITH_3DES_EDE_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_RSA_WITH_3DES_EDE_CBC_SHA;
    case 11:
    case "TLS_DH_DSS_EXPORT_WITH_DES40_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_DH_DSS_EXPORT_WITH_DES40_CBC_SHA;
    case 12:
    case "TLS_DH_DSS_WITH_DES_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_DH_DSS_WITH_DES_CBC_SHA;
    case 13:
    case "TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA;
    case 14:
    case "TLS_DH_RSA_EXPORT_WITH_DES40_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_DH_RSA_EXPORT_WITH_DES40_CBC_SHA;
    case 15:
    case "TLS_DH_RSA_WITH_DES_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_DH_RSA_WITH_DES_CBC_SHA;
    case 16:
    case "TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA;
    case 17:
    case "TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA;
    case 18:
    case "TLS_DHE_DSS_WITH_DES_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_DHE_DSS_WITH_DES_CBC_SHA;
    case 19:
    case "TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA;
    case 20:
    case "TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA;
    case 21:
    case "TLS_DHE_RSA_WITH_DES_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_DHE_RSA_WITH_DES_CBC_SHA;
    case 22:
    case "TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA;
    case 23:
    case "TLS_DH_anon_EXPORT_WITH_RC4_40_MD5":
      return Browser_TLSFingerprint_CipherSuite.TLS_DH_anon_EXPORT_WITH_RC4_40_MD5;
    case 24:
    case "TLS_DH_anon_WITH_RC4_128_MD5":
      return Browser_TLSFingerprint_CipherSuite.TLS_DH_anon_WITH_RC4_128_MD5;
    case 25:
    case "TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA;
    case 26:
    case "TLS_DH_anon_WITH_DES_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_DH_anon_WITH_DES_CBC_SHA;
    case 27:
    case "TLS_DH_anon_WITH_3DES_EDE_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_DH_anon_WITH_3DES_EDE_CBC_SHA;
    case 30:
    case "TLS_KRB5_WITH_DES_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_KRB5_WITH_DES_CBC_SHA;
    case 31:
    case "TLS_KRB5_WITH_3DES_EDE_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_KRB5_WITH_3DES_EDE_CBC_SHA;
    case 32:
    case "TLS_KRB5_WITH_RC4_128_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_KRB5_WITH_RC4_128_SHA;
    case 33:
    case "TLS_KRB5_WITH_IDEA_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_KRB5_WITH_IDEA_CBC_SHA;
    case 34:
    case "TLS_KRB5_WITH_DES_CBC_MD5":
      return Browser_TLSFingerprint_CipherSuite.TLS_KRB5_WITH_DES_CBC_MD5;
    case 35:
    case "TLS_KRB5_WITH_3DES_EDE_CBC_MD5":
      return Browser_TLSFingerprint_CipherSuite.TLS_KRB5_WITH_3DES_EDE_CBC_MD5;
    case 36:
    case "TLS_KRB5_WITH_RC4_128_MD5":
      return Browser_TLSFingerprint_CipherSuite.TLS_KRB5_WITH_RC4_128_MD5;
    case 37:
    case "TLS_KRB5_WITH_IDEA_CBC_MD5":
      return Browser_TLSFingerprint_CipherSuite.TLS_KRB5_WITH_IDEA_CBC_MD5;
    case 38:
    case "TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA;
    case 39:
    case "TLS_KRB5_EXPORT_WITH_RC2_CBC_40_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_KRB5_EXPORT_WITH_RC2_CBC_40_SHA;
    case 40:
    case "TLS_KRB5_EXPORT_WITH_RC4_40_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_KRB5_EXPORT_WITH_RC4_40_SHA;
    case 41:
    case "TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5":
      return Browser_TLSFingerprint_CipherSuite.TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5;
    case 42:
    case "TLS_KRB5_EXPORT_WITH_RC2_CBC_40_MD5":
      return Browser_TLSFingerprint_CipherSuite.TLS_KRB5_EXPORT_WITH_RC2_CBC_40_MD5;
    case 43:
    case "TLS_KRB5_EXPORT_WITH_RC4_40_MD5":
      return Browser_TLSFingerprint_CipherSuite.TLS_KRB5_EXPORT_WITH_RC4_40_MD5;
    case 44:
    case "TLS_PSK_WITH_NULL_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_PSK_WITH_NULL_SHA;
    case 45:
    case "TLS_DHE_PSK_WITH_NULL_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_DHE_PSK_WITH_NULL_SHA;
    case 46:
    case "TLS_RSA_PSK_WITH_NULL_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_RSA_PSK_WITH_NULL_SHA;
    case 47:
    case "TLS_RSA_WITH_AES_128_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_RSA_WITH_AES_128_CBC_SHA;
    case 48:
    case "TLS_DH_DSS_WITH_AES_128_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_DH_DSS_WITH_AES_128_CBC_SHA;
    case 49:
    case "TLS_DH_RSA_WITH_AES_128_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_DH_RSA_WITH_AES_128_CBC_SHA;
    case 50:
    case "TLS_DHE_DSS_WITH_AES_128_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_DHE_DSS_WITH_AES_128_CBC_SHA;
    case 51:
    case "TLS_DHE_RSA_WITH_AES_128_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_DHE_RSA_WITH_AES_128_CBC_SHA;
    case 52:
    case "TLS_DH_anon_WITH_AES_128_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_DH_anon_WITH_AES_128_CBC_SHA;
    case 53:
    case "TLS_RSA_WITH_AES_256_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_RSA_WITH_AES_256_CBC_SHA;
    case 54:
    case "TLS_DH_DSS_WITH_AES_256_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_DH_DSS_WITH_AES_256_CBC_SHA;
    case 55:
    case "TLS_DH_RSA_WITH_AES_256_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_DH_RSA_WITH_AES_256_CBC_SHA;
    case 56:
    case "TLS_DHE_DSS_WITH_AES_256_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_DHE_DSS_WITH_AES_256_CBC_SHA;
    case 57:
    case "TLS_DHE_RSA_WITH_AES_256_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_DHE_RSA_WITH_AES_256_CBC_SHA;
    case 58:
    case "TLS_DH_anon_WITH_AES_256_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_DH_anon_WITH_AES_256_CBC_SHA;
    case 59:
    case "TLS_RSA_WITH_NULL_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_RSA_WITH_NULL_SHA256;
    case 60:
    case "TLS_RSA_WITH_AES_128_CBC_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_RSA_WITH_AES_128_CBC_SHA256;
    case 61:
    case "TLS_RSA_WITH_AES_256_CBC_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_RSA_WITH_AES_256_CBC_SHA256;
    case 62:
    case "TLS_DH_DSS_WITH_AES_128_CBC_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_DH_DSS_WITH_AES_128_CBC_SHA256;
    case 63:
    case "TLS_DH_RSA_WITH_AES_128_CBC_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_DH_RSA_WITH_AES_128_CBC_SHA256;
    case 64:
    case "TLS_DHE_DSS_WITH_AES_128_CBC_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_DHE_DSS_WITH_AES_128_CBC_SHA256;
    case 65:
    case "TLS_RSA_WITH_CAMELLIA_128_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_RSA_WITH_CAMELLIA_128_CBC_SHA;
    case 66:
    case "TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA;
    case 67:
    case "TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA;
    case 68:
    case "TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA;
    case 69:
    case "TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA;
    case 70:
    case "TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA;
    case 103:
    case "TLS_DHE_RSA_WITH_AES_128_CBC_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_DHE_RSA_WITH_AES_128_CBC_SHA256;
    case 104:
    case "TLS_DH_DSS_WITH_AES_256_CBC_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_DH_DSS_WITH_AES_256_CBC_SHA256;
    case 105:
    case "TLS_DH_RSA_WITH_AES_256_CBC_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_DH_RSA_WITH_AES_256_CBC_SHA256;
    case 106:
    case "TLS_DHE_DSS_WITH_AES_256_CBC_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_DHE_DSS_WITH_AES_256_CBC_SHA256;
    case 107:
    case "TLS_DHE_RSA_WITH_AES_256_CBC_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_DHE_RSA_WITH_AES_256_CBC_SHA256;
    case 108:
    case "TLS_DH_anon_WITH_AES_128_CBC_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_DH_anon_WITH_AES_128_CBC_SHA256;
    case 109:
    case "TLS_DH_anon_WITH_AES_256_CBC_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_DH_anon_WITH_AES_256_CBC_SHA256;
    case 132:
    case "TLS_RSA_WITH_CAMELLIA_256_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_RSA_WITH_CAMELLIA_256_CBC_SHA;
    case 133:
    case "TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA;
    case 134:
    case "TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA;
    case 135:
    case "TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA;
    case 136:
    case "TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA;
    case 137:
    case "TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA;
    case 138:
    case "TLS_PSK_WITH_RC4_128_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_PSK_WITH_RC4_128_SHA;
    case 139:
    case "TLS_PSK_WITH_3DES_EDE_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_PSK_WITH_3DES_EDE_CBC_SHA;
    case 140:
    case "TLS_PSK_WITH_AES_128_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_PSK_WITH_AES_128_CBC_SHA;
    case 141:
    case "TLS_PSK_WITH_AES_256_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_PSK_WITH_AES_256_CBC_SHA;
    case 142:
    case "TLS_DHE_PSK_WITH_RC4_128_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_DHE_PSK_WITH_RC4_128_SHA;
    case 143:
    case "TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA;
    case 144:
    case "TLS_DHE_PSK_WITH_AES_128_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_DHE_PSK_WITH_AES_128_CBC_SHA;
    case 145:
    case "TLS_DHE_PSK_WITH_AES_256_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_DHE_PSK_WITH_AES_256_CBC_SHA;
    case 146:
    case "TLS_RSA_PSK_WITH_RC4_128_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_RSA_PSK_WITH_RC4_128_SHA;
    case 147:
    case "TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA;
    case 148:
    case "TLS_RSA_PSK_WITH_AES_128_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_RSA_PSK_WITH_AES_128_CBC_SHA;
    case 149:
    case "TLS_RSA_PSK_WITH_AES_256_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_RSA_PSK_WITH_AES_256_CBC_SHA;
    case 150:
    case "TLS_RSA_WITH_SEED_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_RSA_WITH_SEED_CBC_SHA;
    case 151:
    case "TLS_DH_DSS_WITH_SEED_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_DH_DSS_WITH_SEED_CBC_SHA;
    case 152:
    case "TLS_DH_RSA_WITH_SEED_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_DH_RSA_WITH_SEED_CBC_SHA;
    case 153:
    case "TLS_DHE_DSS_WITH_SEED_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_DHE_DSS_WITH_SEED_CBC_SHA;
    case 154:
    case "TLS_DHE_RSA_WITH_SEED_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_DHE_RSA_WITH_SEED_CBC_SHA;
    case 155:
    case "TLS_DH_anon_WITH_SEED_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_DH_anon_WITH_SEED_CBC_SHA;
    case 156:
    case "TLS_RSA_WITH_AES_128_GCM_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_RSA_WITH_AES_128_GCM_SHA256;
    case 157:
    case "TLS_RSA_WITH_AES_256_GCM_SHA384":
      return Browser_TLSFingerprint_CipherSuite.TLS_RSA_WITH_AES_256_GCM_SHA384;
    case 158:
    case "TLS_DHE_RSA_WITH_AES_128_GCM_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_DHE_RSA_WITH_AES_128_GCM_SHA256;
    case 159:
    case "TLS_DHE_RSA_WITH_AES_256_GCM_SHA384":
      return Browser_TLSFingerprint_CipherSuite.TLS_DHE_RSA_WITH_AES_256_GCM_SHA384;
    case 160:
    case "TLS_DH_RSA_WITH_AES_128_GCM_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_DH_RSA_WITH_AES_128_GCM_SHA256;
    case 161:
    case "TLS_DH_RSA_WITH_AES_256_GCM_SHA384":
      return Browser_TLSFingerprint_CipherSuite.TLS_DH_RSA_WITH_AES_256_GCM_SHA384;
    case 162:
    case "TLS_DHE_DSS_WITH_AES_128_GCM_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_DHE_DSS_WITH_AES_128_GCM_SHA256;
    case 163:
    case "TLS_DHE_DSS_WITH_AES_256_GCM_SHA384":
      return Browser_TLSFingerprint_CipherSuite.TLS_DHE_DSS_WITH_AES_256_GCM_SHA384;
    case 164:
    case "TLS_DH_DSS_WITH_AES_128_GCM_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_DH_DSS_WITH_AES_128_GCM_SHA256;
    case 165:
    case "TLS_DH_DSS_WITH_AES_256_GCM_SHA384":
      return Browser_TLSFingerprint_CipherSuite.TLS_DH_DSS_WITH_AES_256_GCM_SHA384;
    case 166:
    case "TLS_DH_anon_WITH_AES_128_GCM_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_DH_anon_WITH_AES_128_GCM_SHA256;
    case 167:
    case "TLS_DH_anon_WITH_AES_256_GCM_SHA384":
      return Browser_TLSFingerprint_CipherSuite.TLS_DH_anon_WITH_AES_256_GCM_SHA384;
    case 168:
    case "TLS_PSK_WITH_AES_128_GCM_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_PSK_WITH_AES_128_GCM_SHA256;
    case 169:
    case "TLS_PSK_WITH_AES_256_GCM_SHA384":
      return Browser_TLSFingerprint_CipherSuite.TLS_PSK_WITH_AES_256_GCM_SHA384;
    case 170:
    case "TLS_DHE_PSK_WITH_AES_128_GCM_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_DHE_PSK_WITH_AES_128_GCM_SHA256;
    case 171:
    case "TLS_DHE_PSK_WITH_AES_256_GCM_SHA384":
      return Browser_TLSFingerprint_CipherSuite.TLS_DHE_PSK_WITH_AES_256_GCM_SHA384;
    case 172:
    case "TLS_RSA_PSK_WITH_AES_128_GCM_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_RSA_PSK_WITH_AES_128_GCM_SHA256;
    case 173:
    case "TLS_RSA_PSK_WITH_AES_256_GCM_SHA384":
      return Browser_TLSFingerprint_CipherSuite.TLS_RSA_PSK_WITH_AES_256_GCM_SHA384;
    case 174:
    case "TLS_PSK_WITH_AES_128_CBC_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_PSK_WITH_AES_128_CBC_SHA256;
    case 175:
    case "TLS_PSK_WITH_AES_256_CBC_SHA384":
      return Browser_TLSFingerprint_CipherSuite.TLS_PSK_WITH_AES_256_CBC_SHA384;
    case 176:
    case "TLS_PSK_WITH_NULL_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_PSK_WITH_NULL_SHA256;
    case 177:
    case "TLS_PSK_WITH_NULL_SHA384":
      return Browser_TLSFingerprint_CipherSuite.TLS_PSK_WITH_NULL_SHA384;
    case 178:
    case "TLS_DHE_PSK_WITH_AES_128_CBC_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_DHE_PSK_WITH_AES_128_CBC_SHA256;
    case 179:
    case "TLS_DHE_PSK_WITH_AES_256_CBC_SHA384":
      return Browser_TLSFingerprint_CipherSuite.TLS_DHE_PSK_WITH_AES_256_CBC_SHA384;
    case 180:
    case "TLS_DHE_PSK_WITH_NULL_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_DHE_PSK_WITH_NULL_SHA256;
    case 181:
    case "TLS_DHE_PSK_WITH_NULL_SHA384":
      return Browser_TLSFingerprint_CipherSuite.TLS_DHE_PSK_WITH_NULL_SHA384;
    case 182:
    case "TLS_RSA_PSK_WITH_AES_128_CBC_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_RSA_PSK_WITH_AES_128_CBC_SHA256;
    case 183:
    case "TLS_RSA_PSK_WITH_AES_256_CBC_SHA384":
      return Browser_TLSFingerprint_CipherSuite.TLS_RSA_PSK_WITH_AES_256_CBC_SHA384;
    case 184:
    case "TLS_RSA_PSK_WITH_NULL_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_RSA_PSK_WITH_NULL_SHA256;
    case 185:
    case "TLS_RSA_PSK_WITH_NULL_SHA384":
      return Browser_TLSFingerprint_CipherSuite.TLS_RSA_PSK_WITH_NULL_SHA384;
    case 186:
    case "TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256;
    case 187:
    case "TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256;
    case 188:
    case "TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256;
    case 189:
    case "TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256;
    case 190:
    case "TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256;
    case 191:
    case "TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA256;
    case 192:
    case "TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256;
    case 193:
    case "TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256;
    case 194:
    case "TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256;
    case 195:
    case "TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256;
    case 196:
    case "TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256;
    case 197:
    case "TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA256;
    case 198:
    case "TLS_SM4_GCM_SM3":
      return Browser_TLSFingerprint_CipherSuite.TLS_SM4_GCM_SM3;
    case 199:
    case "TLS_SM4_CCM_SM3":
      return Browser_TLSFingerprint_CipherSuite.TLS_SM4_CCM_SM3;
    case 255:
    case "TLS_EMPTY_RENEGOTIATION_INFO_SCSV":
      return Browser_TLSFingerprint_CipherSuite.TLS_EMPTY_RENEGOTIATION_INFO_SCSV;
    case 2570:
    case "Reserved":
      return Browser_TLSFingerprint_CipherSuite.Reserved;
    case 4864:
    case "Unassigned":
      return Browser_TLSFingerprint_CipherSuite.Unassigned;
    case 4865:
    case "TLS_AES_128_GCM_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_AES_128_GCM_SHA256;
    case 4866:
    case "TLS_AES_256_GCM_SHA384":
      return Browser_TLSFingerprint_CipherSuite.TLS_AES_256_GCM_SHA384;
    case 4867:
    case "TLS_CHACHA20_POLY1305_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_CHACHA20_POLY1305_SHA256;
    case 4868:
    case "TLS_AES_128_CCM_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_AES_128_CCM_SHA256;
    case 4869:
    case "TLS_AES_128_CCM_8_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_AES_128_CCM_8_SHA256;
    case 4870:
    case "TLS_AEGIS_256_SHA384":
      return Browser_TLSFingerprint_CipherSuite.TLS_AEGIS_256_SHA384;
    case 4871:
    case "TLS_AEGIS_128L_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_AEGIS_128L_SHA256;
    case 22016:
    case "TLS_FALLBACK_SCSV":
      return Browser_TLSFingerprint_CipherSuite.TLS_FALLBACK_SCSV;
    case 49153:
    case "TLS_ECDH_ECDSA_WITH_NULL_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDH_ECDSA_WITH_NULL_SHA;
    case 49154:
    case "TLS_ECDH_ECDSA_WITH_RC4_128_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDH_ECDSA_WITH_RC4_128_SHA;
    case 49155:
    case "TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA;
    case 49156:
    case "TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA;
    case 49157:
    case "TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA;
    case 49158:
    case "TLS_ECDHE_ECDSA_WITH_NULL_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_ECDSA_WITH_NULL_SHA;
    case 49159:
    case "TLS_ECDHE_ECDSA_WITH_RC4_128_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_ECDSA_WITH_RC4_128_SHA;
    case 49160:
    case "TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA;
    case 49161:
    case "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA;
    case 49162:
    case "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA;
    case 49163:
    case "TLS_ECDH_RSA_WITH_NULL_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDH_RSA_WITH_NULL_SHA;
    case 49164:
    case "TLS_ECDH_RSA_WITH_RC4_128_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDH_RSA_WITH_RC4_128_SHA;
    case 49165:
    case "TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA;
    case 49166:
    case "TLS_ECDH_RSA_WITH_AES_128_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDH_RSA_WITH_AES_128_CBC_SHA;
    case 49167:
    case "TLS_ECDH_RSA_WITH_AES_256_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDH_RSA_WITH_AES_256_CBC_SHA;
    case 49168:
    case "TLS_ECDHE_RSA_WITH_NULL_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_RSA_WITH_NULL_SHA;
    case 49169:
    case "TLS_ECDHE_RSA_WITH_RC4_128_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_RSA_WITH_RC4_128_SHA;
    case 49170:
    case "TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA;
    case 49171:
    case "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA;
    case 49172:
    case "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA;
    case 49173:
    case "TLS_ECDH_anon_WITH_NULL_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDH_anon_WITH_NULL_SHA;
    case 49174:
    case "TLS_ECDH_anon_WITH_RC4_128_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDH_anon_WITH_RC4_128_SHA;
    case 49175:
    case "TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA;
    case 49176:
    case "TLS_ECDH_anon_WITH_AES_128_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDH_anon_WITH_AES_128_CBC_SHA;
    case 49177:
    case "TLS_ECDH_anon_WITH_AES_256_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDH_anon_WITH_AES_256_CBC_SHA;
    case 49178:
    case "TLS_SRP_SHA_WITH_3DES_EDE_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_SRP_SHA_WITH_3DES_EDE_CBC_SHA;
    case 49179:
    case "TLS_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA;
    case 49180:
    case "TLS_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA;
    case 49181:
    case "TLS_SRP_SHA_WITH_AES_128_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_SRP_SHA_WITH_AES_128_CBC_SHA;
    case 49182:
    case "TLS_SRP_SHA_RSA_WITH_AES_128_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_SRP_SHA_RSA_WITH_AES_128_CBC_SHA;
    case 49183:
    case "TLS_SRP_SHA_DSS_WITH_AES_128_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_SRP_SHA_DSS_WITH_AES_128_CBC_SHA;
    case 49184:
    case "TLS_SRP_SHA_WITH_AES_256_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_SRP_SHA_WITH_AES_256_CBC_SHA;
    case 49185:
    case "TLS_SRP_SHA_RSA_WITH_AES_256_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_SRP_SHA_RSA_WITH_AES_256_CBC_SHA;
    case 49186:
    case "TLS_SRP_SHA_DSS_WITH_AES_256_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_SRP_SHA_DSS_WITH_AES_256_CBC_SHA;
    case 49187:
    case "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256;
    case 49188:
    case "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384;
    case 49189:
    case "TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256;
    case 49190:
    case "TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384;
    case 49191:
    case "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256;
    case 49192:
    case "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384;
    case 49193:
    case "TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256;
    case 49194:
    case "TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384;
    case 49195:
    case "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256;
    case 49196:
    case "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384;
    case 49197:
    case "TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256;
    case 49198:
    case "TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384;
    case 49199:
    case "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256;
    case 49200:
    case "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384;
    case 49201:
    case "TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256;
    case 49202:
    case "TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384;
    case 49203:
    case "TLS_ECDHE_PSK_WITH_RC4_128_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_PSK_WITH_RC4_128_SHA;
    case 49204:
    case "TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA;
    case 49205:
    case "TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA;
    case 49206:
    case "TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA;
    case 49207:
    case "TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256;
    case 49208:
    case "TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384;
    case 49209:
    case "TLS_ECDHE_PSK_WITH_NULL_SHA":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_PSK_WITH_NULL_SHA;
    case 49210:
    case "TLS_ECDHE_PSK_WITH_NULL_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_PSK_WITH_NULL_SHA256;
    case 49211:
    case "TLS_ECDHE_PSK_WITH_NULL_SHA384":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_PSK_WITH_NULL_SHA384;
    case 49212:
    case "TLS_RSA_WITH_ARIA_128_CBC_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_RSA_WITH_ARIA_128_CBC_SHA256;
    case 49213:
    case "TLS_RSA_WITH_ARIA_256_CBC_SHA384":
      return Browser_TLSFingerprint_CipherSuite.TLS_RSA_WITH_ARIA_256_CBC_SHA384;
    case 49214:
    case "TLS_DH_DSS_WITH_ARIA_128_CBC_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_DH_DSS_WITH_ARIA_128_CBC_SHA256;
    case 49215:
    case "TLS_DH_DSS_WITH_ARIA_256_CBC_SHA384":
      return Browser_TLSFingerprint_CipherSuite.TLS_DH_DSS_WITH_ARIA_256_CBC_SHA384;
    case 49216:
    case "TLS_DH_RSA_WITH_ARIA_128_CBC_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_DH_RSA_WITH_ARIA_128_CBC_SHA256;
    case 49217:
    case "TLS_DH_RSA_WITH_ARIA_256_CBC_SHA384":
      return Browser_TLSFingerprint_CipherSuite.TLS_DH_RSA_WITH_ARIA_256_CBC_SHA384;
    case 49218:
    case "TLS_DHE_DSS_WITH_ARIA_128_CBC_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_DHE_DSS_WITH_ARIA_128_CBC_SHA256;
    case 49219:
    case "TLS_DHE_DSS_WITH_ARIA_256_CBC_SHA384":
      return Browser_TLSFingerprint_CipherSuite.TLS_DHE_DSS_WITH_ARIA_256_CBC_SHA384;
    case 49220:
    case "TLS_DHE_RSA_WITH_ARIA_128_CBC_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_DHE_RSA_WITH_ARIA_128_CBC_SHA256;
    case 49221:
    case "TLS_DHE_RSA_WITH_ARIA_256_CBC_SHA384":
      return Browser_TLSFingerprint_CipherSuite.TLS_DHE_RSA_WITH_ARIA_256_CBC_SHA384;
    case 49222:
    case "TLS_DH_anon_WITH_ARIA_128_CBC_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_DH_anon_WITH_ARIA_128_CBC_SHA256;
    case 49223:
    case "TLS_DH_anon_WITH_ARIA_256_CBC_SHA384":
      return Browser_TLSFingerprint_CipherSuite.TLS_DH_anon_WITH_ARIA_256_CBC_SHA384;
    case 49224:
    case "TLS_ECDHE_ECDSA_WITH_ARIA_128_CBC_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_ECDSA_WITH_ARIA_128_CBC_SHA256;
    case 49225:
    case "TLS_ECDHE_ECDSA_WITH_ARIA_256_CBC_SHA384":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_ECDSA_WITH_ARIA_256_CBC_SHA384;
    case 49226:
    case "TLS_ECDH_ECDSA_WITH_ARIA_128_CBC_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDH_ECDSA_WITH_ARIA_128_CBC_SHA256;
    case 49227:
    case "TLS_ECDH_ECDSA_WITH_ARIA_256_CBC_SHA384":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDH_ECDSA_WITH_ARIA_256_CBC_SHA384;
    case 49228:
    case "TLS_ECDHE_RSA_WITH_ARIA_128_CBC_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_RSA_WITH_ARIA_128_CBC_SHA256;
    case 49229:
    case "TLS_ECDHE_RSA_WITH_ARIA_256_CBC_SHA384":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_RSA_WITH_ARIA_256_CBC_SHA384;
    case 49230:
    case "TLS_ECDH_RSA_WITH_ARIA_128_CBC_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDH_RSA_WITH_ARIA_128_CBC_SHA256;
    case 49231:
    case "TLS_ECDH_RSA_WITH_ARIA_256_CBC_SHA384":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDH_RSA_WITH_ARIA_256_CBC_SHA384;
    case 49232:
    case "TLS_RSA_WITH_ARIA_128_GCM_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_RSA_WITH_ARIA_128_GCM_SHA256;
    case 49233:
    case "TLS_RSA_WITH_ARIA_256_GCM_SHA384":
      return Browser_TLSFingerprint_CipherSuite.TLS_RSA_WITH_ARIA_256_GCM_SHA384;
    case 49234:
    case "TLS_DHE_RSA_WITH_ARIA_128_GCM_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_DHE_RSA_WITH_ARIA_128_GCM_SHA256;
    case 49235:
    case "TLS_DHE_RSA_WITH_ARIA_256_GCM_SHA384":
      return Browser_TLSFingerprint_CipherSuite.TLS_DHE_RSA_WITH_ARIA_256_GCM_SHA384;
    case 49236:
    case "TLS_DH_RSA_WITH_ARIA_128_GCM_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_DH_RSA_WITH_ARIA_128_GCM_SHA256;
    case 49237:
    case "TLS_DH_RSA_WITH_ARIA_256_GCM_SHA384":
      return Browser_TLSFingerprint_CipherSuite.TLS_DH_RSA_WITH_ARIA_256_GCM_SHA384;
    case 49238:
    case "TLS_DHE_DSS_WITH_ARIA_128_GCM_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_DHE_DSS_WITH_ARIA_128_GCM_SHA256;
    case 49239:
    case "TLS_DHE_DSS_WITH_ARIA_256_GCM_SHA384":
      return Browser_TLSFingerprint_CipherSuite.TLS_DHE_DSS_WITH_ARIA_256_GCM_SHA384;
    case 49240:
    case "TLS_DH_DSS_WITH_ARIA_128_GCM_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_DH_DSS_WITH_ARIA_128_GCM_SHA256;
    case 49241:
    case "TLS_DH_DSS_WITH_ARIA_256_GCM_SHA384":
      return Browser_TLSFingerprint_CipherSuite.TLS_DH_DSS_WITH_ARIA_256_GCM_SHA384;
    case 49242:
    case "TLS_DH_anon_WITH_ARIA_128_GCM_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_DH_anon_WITH_ARIA_128_GCM_SHA256;
    case 49243:
    case "TLS_DH_anon_WITH_ARIA_256_GCM_SHA384":
      return Browser_TLSFingerprint_CipherSuite.TLS_DH_anon_WITH_ARIA_256_GCM_SHA384;
    case 49244:
    case "TLS_ECDHE_ECDSA_WITH_ARIA_128_GCM_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_ECDSA_WITH_ARIA_128_GCM_SHA256;
    case 49245:
    case "TLS_ECDHE_ECDSA_WITH_ARIA_256_GCM_SHA384":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_ECDSA_WITH_ARIA_256_GCM_SHA384;
    case 49246:
    case "TLS_ECDH_ECDSA_WITH_ARIA_128_GCM_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDH_ECDSA_WITH_ARIA_128_GCM_SHA256;
    case 49247:
    case "TLS_ECDH_ECDSA_WITH_ARIA_256_GCM_SHA384":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDH_ECDSA_WITH_ARIA_256_GCM_SHA384;
    case 49248:
    case "TLS_ECDHE_RSA_WITH_ARIA_128_GCM_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_RSA_WITH_ARIA_128_GCM_SHA256;
    case 49249:
    case "TLS_ECDHE_RSA_WITH_ARIA_256_GCM_SHA384":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_RSA_WITH_ARIA_256_GCM_SHA384;
    case 49250:
    case "TLS_ECDH_RSA_WITH_ARIA_128_GCM_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDH_RSA_WITH_ARIA_128_GCM_SHA256;
    case 49251:
    case "TLS_ECDH_RSA_WITH_ARIA_256_GCM_SHA384":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDH_RSA_WITH_ARIA_256_GCM_SHA384;
    case 49252:
    case "TLS_PSK_WITH_ARIA_128_CBC_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_PSK_WITH_ARIA_128_CBC_SHA256;
    case 49253:
    case "TLS_PSK_WITH_ARIA_256_CBC_SHA384":
      return Browser_TLSFingerprint_CipherSuite.TLS_PSK_WITH_ARIA_256_CBC_SHA384;
    case 49254:
    case "TLS_DHE_PSK_WITH_ARIA_128_CBC_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_DHE_PSK_WITH_ARIA_128_CBC_SHA256;
    case 49255:
    case "TLS_DHE_PSK_WITH_ARIA_256_CBC_SHA384":
      return Browser_TLSFingerprint_CipherSuite.TLS_DHE_PSK_WITH_ARIA_256_CBC_SHA384;
    case 49256:
    case "TLS_RSA_PSK_WITH_ARIA_128_CBC_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_RSA_PSK_WITH_ARIA_128_CBC_SHA256;
    case 49257:
    case "TLS_RSA_PSK_WITH_ARIA_256_CBC_SHA384":
      return Browser_TLSFingerprint_CipherSuite.TLS_RSA_PSK_WITH_ARIA_256_CBC_SHA384;
    case 49258:
    case "TLS_PSK_WITH_ARIA_128_GCM_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_PSK_WITH_ARIA_128_GCM_SHA256;
    case 49259:
    case "TLS_PSK_WITH_ARIA_256_GCM_SHA384":
      return Browser_TLSFingerprint_CipherSuite.TLS_PSK_WITH_ARIA_256_GCM_SHA384;
    case 49260:
    case "TLS_DHE_PSK_WITH_ARIA_128_GCM_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_DHE_PSK_WITH_ARIA_128_GCM_SHA256;
    case 49261:
    case "TLS_DHE_PSK_WITH_ARIA_256_GCM_SHA384":
      return Browser_TLSFingerprint_CipherSuite.TLS_DHE_PSK_WITH_ARIA_256_GCM_SHA384;
    case 49262:
    case "TLS_RSA_PSK_WITH_ARIA_128_GCM_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_RSA_PSK_WITH_ARIA_128_GCM_SHA256;
    case 49263:
    case "TLS_RSA_PSK_WITH_ARIA_256_GCM_SHA384":
      return Browser_TLSFingerprint_CipherSuite.TLS_RSA_PSK_WITH_ARIA_256_GCM_SHA384;
    case 49264:
    case "TLS_ECDHE_PSK_WITH_ARIA_128_CBC_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_PSK_WITH_ARIA_128_CBC_SHA256;
    case 49265:
    case "TLS_ECDHE_PSK_WITH_ARIA_256_CBC_SHA384":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_PSK_WITH_ARIA_256_CBC_SHA384;
    case 49266:
    case "TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256;
    case 49267:
    case "TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384;
    case 49268:
    case "TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256;
    case 49269:
    case "TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384;
    case 49270:
    case "TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256;
    case 49271:
    case "TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384;
    case 49272:
    case "TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256;
    case 49273:
    case "TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384;
    case 49274:
    case "TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256;
    case 49275:
    case "TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384":
      return Browser_TLSFingerprint_CipherSuite.TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384;
    case 49276:
    case "TLS_DHE_RSA_WITH_CAMELLIA_128_GCM_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_DHE_RSA_WITH_CAMELLIA_128_GCM_SHA256;
    case 49277:
    case "TLS_DHE_RSA_WITH_CAMELLIA_256_GCM_SHA384":
      return Browser_TLSFingerprint_CipherSuite.TLS_DHE_RSA_WITH_CAMELLIA_256_GCM_SHA384;
    case 49278:
    case "TLS_DH_RSA_WITH_CAMELLIA_128_GCM_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_DH_RSA_WITH_CAMELLIA_128_GCM_SHA256;
    case 49279:
    case "TLS_DH_RSA_WITH_CAMELLIA_256_GCM_SHA384":
      return Browser_TLSFingerprint_CipherSuite.TLS_DH_RSA_WITH_CAMELLIA_256_GCM_SHA384;
    case 49280:
    case "TLS_DHE_DSS_WITH_CAMELLIA_128_GCM_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_DHE_DSS_WITH_CAMELLIA_128_GCM_SHA256;
    case 49281:
    case "TLS_DHE_DSS_WITH_CAMELLIA_256_GCM_SHA384":
      return Browser_TLSFingerprint_CipherSuite.TLS_DHE_DSS_WITH_CAMELLIA_256_GCM_SHA384;
    case 49282:
    case "TLS_DH_DSS_WITH_CAMELLIA_128_GCM_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_DH_DSS_WITH_CAMELLIA_128_GCM_SHA256;
    case 49283:
    case "TLS_DH_DSS_WITH_CAMELLIA_256_GCM_SHA384":
      return Browser_TLSFingerprint_CipherSuite.TLS_DH_DSS_WITH_CAMELLIA_256_GCM_SHA384;
    case 49284:
    case "TLS_DH_anon_WITH_CAMELLIA_128_GCM_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_DH_anon_WITH_CAMELLIA_128_GCM_SHA256;
    case 49285:
    case "TLS_DH_anon_WITH_CAMELLIA_256_GCM_SHA384":
      return Browser_TLSFingerprint_CipherSuite.TLS_DH_anon_WITH_CAMELLIA_256_GCM_SHA384;
    case 49286:
    case "TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256;
    case 49287:
    case "TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_GCM_SHA384":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_GCM_SHA384;
    case 49288:
    case "TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256;
    case 49289:
    case "TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384;
    case 49290:
    case "TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256;
    case 49291:
    case "TLS_ECDHE_RSA_WITH_CAMELLIA_256_GCM_SHA384":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_RSA_WITH_CAMELLIA_256_GCM_SHA384;
    case 49292:
    case "TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256;
    case 49293:
    case "TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384;
    case 49294:
    case "TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256;
    case 49295:
    case "TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384":
      return Browser_TLSFingerprint_CipherSuite.TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384;
    case 49296:
    case "TLS_DHE_PSK_WITH_CAMELLIA_128_GCM_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_DHE_PSK_WITH_CAMELLIA_128_GCM_SHA256;
    case 49297:
    case "TLS_DHE_PSK_WITH_CAMELLIA_256_GCM_SHA384":
      return Browser_TLSFingerprint_CipherSuite.TLS_DHE_PSK_WITH_CAMELLIA_256_GCM_SHA384;
    case 49298:
    case "TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256;
    case 49299:
    case "TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384":
      return Browser_TLSFingerprint_CipherSuite.TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384;
    case 49300:
    case "TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256;
    case 49301:
    case "TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384":
      return Browser_TLSFingerprint_CipherSuite.TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384;
    case 49302:
    case "TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256;
    case 49303:
    case "TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384":
      return Browser_TLSFingerprint_CipherSuite.TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384;
    case 49304:
    case "TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256;
    case 49305:
    case "TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384":
      return Browser_TLSFingerprint_CipherSuite.TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384;
    case 49306:
    case "TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256;
    case 49307:
    case "TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384;
    case 49308:
    case "TLS_RSA_WITH_AES_128_CCM":
      return Browser_TLSFingerprint_CipherSuite.TLS_RSA_WITH_AES_128_CCM;
    case 49309:
    case "TLS_RSA_WITH_AES_256_CCM":
      return Browser_TLSFingerprint_CipherSuite.TLS_RSA_WITH_AES_256_CCM;
    case 49310:
    case "TLS_DHE_RSA_WITH_AES_128_CCM":
      return Browser_TLSFingerprint_CipherSuite.TLS_DHE_RSA_WITH_AES_128_CCM;
    case 49311:
    case "TLS_DHE_RSA_WITH_AES_256_CCM":
      return Browser_TLSFingerprint_CipherSuite.TLS_DHE_RSA_WITH_AES_256_CCM;
    case 49312:
    case "TLS_RSA_WITH_AES_128_CCM_8":
      return Browser_TLSFingerprint_CipherSuite.TLS_RSA_WITH_AES_128_CCM_8;
    case 49313:
    case "TLS_RSA_WITH_AES_256_CCM_8":
      return Browser_TLSFingerprint_CipherSuite.TLS_RSA_WITH_AES_256_CCM_8;
    case 49314:
    case "TLS_DHE_RSA_WITH_AES_128_CCM_8":
      return Browser_TLSFingerprint_CipherSuite.TLS_DHE_RSA_WITH_AES_128_CCM_8;
    case 49315:
    case "TLS_DHE_RSA_WITH_AES_256_CCM_8":
      return Browser_TLSFingerprint_CipherSuite.TLS_DHE_RSA_WITH_AES_256_CCM_8;
    case 49316:
    case "TLS_PSK_WITH_AES_128_CCM":
      return Browser_TLSFingerprint_CipherSuite.TLS_PSK_WITH_AES_128_CCM;
    case 49317:
    case "TLS_PSK_WITH_AES_256_CCM":
      return Browser_TLSFingerprint_CipherSuite.TLS_PSK_WITH_AES_256_CCM;
    case 49318:
    case "TLS_DHE_PSK_WITH_AES_128_CCM":
      return Browser_TLSFingerprint_CipherSuite.TLS_DHE_PSK_WITH_AES_128_CCM;
    case 49319:
    case "TLS_DHE_PSK_WITH_AES_256_CCM":
      return Browser_TLSFingerprint_CipherSuite.TLS_DHE_PSK_WITH_AES_256_CCM;
    case 49320:
    case "TLS_PSK_WITH_AES_128_CCM_8":
      return Browser_TLSFingerprint_CipherSuite.TLS_PSK_WITH_AES_128_CCM_8;
    case 49321:
    case "TLS_PSK_WITH_AES_256_CCM_8":
      return Browser_TLSFingerprint_CipherSuite.TLS_PSK_WITH_AES_256_CCM_8;
    case 49322:
    case "TLS_PSK_DHE_WITH_AES_128_CCM_8":
      return Browser_TLSFingerprint_CipherSuite.TLS_PSK_DHE_WITH_AES_128_CCM_8;
    case 49323:
    case "TLS_PSK_DHE_WITH_AES_256_CCM_8":
      return Browser_TLSFingerprint_CipherSuite.TLS_PSK_DHE_WITH_AES_256_CCM_8;
    case 49324:
    case "TLS_ECDHE_ECDSA_WITH_AES_128_CCM":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_128_CCM;
    case 49325:
    case "TLS_ECDHE_ECDSA_WITH_AES_256_CCM":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_256_CCM;
    case 49326:
    case "TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8;
    case 49327:
    case "TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8;
    case 49328:
    case "TLS_ECCPWD_WITH_AES_128_GCM_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECCPWD_WITH_AES_128_GCM_SHA256;
    case 49329:
    case "TLS_ECCPWD_WITH_AES_256_GCM_SHA384":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECCPWD_WITH_AES_256_GCM_SHA384;
    case 49330:
    case "TLS_ECCPWD_WITH_AES_128_CCM_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECCPWD_WITH_AES_128_CCM_SHA256;
    case 49331:
    case "TLS_ECCPWD_WITH_AES_256_CCM_SHA384":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECCPWD_WITH_AES_256_CCM_SHA384;
    case 49332:
    case "TLS_SHA256_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_SHA256_SHA256;
    case 49333:
    case "TLS_SHA384_SHA384":
      return Browser_TLSFingerprint_CipherSuite.TLS_SHA384_SHA384;
    case 49408:
    case "TLS_GOSTR341112_256_WITH_KUZNYECHIK_CTR_OMAC":
      return Browser_TLSFingerprint_CipherSuite.TLS_GOSTR341112_256_WITH_KUZNYECHIK_CTR_OMAC;
    case 49409:
    case "TLS_GOSTR341112_256_WITH_MAGMA_CTR_OMAC":
      return Browser_TLSFingerprint_CipherSuite.TLS_GOSTR341112_256_WITH_MAGMA_CTR_OMAC;
    case 49410:
    case "TLS_GOSTR341112_256_WITH_28147_CNT_IMIT":
      return Browser_TLSFingerprint_CipherSuite.TLS_GOSTR341112_256_WITH_28147_CNT_IMIT;
    case 49411:
    case "TLS_GOSTR341112_256_WITH_KUZNYECHIK_MGM_L":
      return Browser_TLSFingerprint_CipherSuite.TLS_GOSTR341112_256_WITH_KUZNYECHIK_MGM_L;
    case 49412:
    case "TLS_GOSTR341112_256_WITH_MAGMA_MGM_L":
      return Browser_TLSFingerprint_CipherSuite.TLS_GOSTR341112_256_WITH_MAGMA_MGM_L;
    case 49413:
    case "TLS_GOSTR341112_256_WITH_KUZNYECHIK_MGM_S":
      return Browser_TLSFingerprint_CipherSuite.TLS_GOSTR341112_256_WITH_KUZNYECHIK_MGM_S;
    case 49414:
    case "TLS_GOSTR341112_256_WITH_MAGMA_MGM_S":
      return Browser_TLSFingerprint_CipherSuite.TLS_GOSTR341112_256_WITH_MAGMA_MGM_S;
    case 52392:
    case "TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256;
    case 52393:
    case "TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256;
    case 52394:
    case "TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256;
    case 52395:
    case "TLS_PSK_WITH_CHACHA20_POLY1305_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_PSK_WITH_CHACHA20_POLY1305_SHA256;
    case 52396:
    case "TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256;
    case 52397:
    case "TLS_DHE_PSK_WITH_CHACHA20_POLY1305_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_DHE_PSK_WITH_CHACHA20_POLY1305_SHA256;
    case 52398:
    case "TLS_RSA_PSK_WITH_CHACHA20_POLY1305_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_RSA_PSK_WITH_CHACHA20_POLY1305_SHA256;
    case 53249:
    case "TLS_ECDHE_PSK_WITH_AES_128_GCM_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_PSK_WITH_AES_128_GCM_SHA256;
    case 53250:
    case "TLS_ECDHE_PSK_WITH_AES_256_GCM_SHA384":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_PSK_WITH_AES_256_GCM_SHA384;
    case 53251:
    case "TLS_ECDHE_PSK_WITH_AES_128_CCM_8_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_PSK_WITH_AES_128_CCM_8_SHA256;
    case 53253:
    case "TLS_ECDHE_PSK_WITH_AES_128_CCM_SHA256":
      return Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_PSK_WITH_AES_128_CCM_SHA256;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Browser_TLSFingerprint_CipherSuite.UNRECOGNIZED;
  }
}

export function browser_TLSFingerprint_CipherSuiteToJSON(object: Browser_TLSFingerprint_CipherSuite): string {
  switch (object) {
    case Browser_TLSFingerprint_CipherSuite.TLS_NULL_WITH_NULL_NULL:
      return "TLS_NULL_WITH_NULL_NULL";
    case Browser_TLSFingerprint_CipherSuite.TLS_RSA_WITH_NULL_MD5:
      return "TLS_RSA_WITH_NULL_MD5";
    case Browser_TLSFingerprint_CipherSuite.TLS_RSA_WITH_NULL_SHA:
      return "TLS_RSA_WITH_NULL_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_RSA_EXPORT_WITH_RC4_40_MD5:
      return "TLS_RSA_EXPORT_WITH_RC4_40_MD5";
    case Browser_TLSFingerprint_CipherSuite.TLS_RSA_WITH_RC4_128_MD5:
      return "TLS_RSA_WITH_RC4_128_MD5";
    case Browser_TLSFingerprint_CipherSuite.TLS_RSA_WITH_RC4_128_SHA:
      return "TLS_RSA_WITH_RC4_128_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5:
      return "TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5";
    case Browser_TLSFingerprint_CipherSuite.TLS_RSA_WITH_IDEA_CBC_SHA:
      return "TLS_RSA_WITH_IDEA_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_RSA_EXPORT_WITH_DES40_CBC_SHA:
      return "TLS_RSA_EXPORT_WITH_DES40_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_RSA_WITH_DES_CBC_SHA:
      return "TLS_RSA_WITH_DES_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_RSA_WITH_3DES_EDE_CBC_SHA:
      return "TLS_RSA_WITH_3DES_EDE_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_DH_DSS_EXPORT_WITH_DES40_CBC_SHA:
      return "TLS_DH_DSS_EXPORT_WITH_DES40_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_DH_DSS_WITH_DES_CBC_SHA:
      return "TLS_DH_DSS_WITH_DES_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA:
      return "TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_DH_RSA_EXPORT_WITH_DES40_CBC_SHA:
      return "TLS_DH_RSA_EXPORT_WITH_DES40_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_DH_RSA_WITH_DES_CBC_SHA:
      return "TLS_DH_RSA_WITH_DES_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA:
      return "TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA:
      return "TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_DHE_DSS_WITH_DES_CBC_SHA:
      return "TLS_DHE_DSS_WITH_DES_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA:
      return "TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA:
      return "TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_DHE_RSA_WITH_DES_CBC_SHA:
      return "TLS_DHE_RSA_WITH_DES_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA:
      return "TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_DH_anon_EXPORT_WITH_RC4_40_MD5:
      return "TLS_DH_anon_EXPORT_WITH_RC4_40_MD5";
    case Browser_TLSFingerprint_CipherSuite.TLS_DH_anon_WITH_RC4_128_MD5:
      return "TLS_DH_anon_WITH_RC4_128_MD5";
    case Browser_TLSFingerprint_CipherSuite.TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA:
      return "TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_DH_anon_WITH_DES_CBC_SHA:
      return "TLS_DH_anon_WITH_DES_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_DH_anon_WITH_3DES_EDE_CBC_SHA:
      return "TLS_DH_anon_WITH_3DES_EDE_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_KRB5_WITH_DES_CBC_SHA:
      return "TLS_KRB5_WITH_DES_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_KRB5_WITH_3DES_EDE_CBC_SHA:
      return "TLS_KRB5_WITH_3DES_EDE_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_KRB5_WITH_RC4_128_SHA:
      return "TLS_KRB5_WITH_RC4_128_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_KRB5_WITH_IDEA_CBC_SHA:
      return "TLS_KRB5_WITH_IDEA_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_KRB5_WITH_DES_CBC_MD5:
      return "TLS_KRB5_WITH_DES_CBC_MD5";
    case Browser_TLSFingerprint_CipherSuite.TLS_KRB5_WITH_3DES_EDE_CBC_MD5:
      return "TLS_KRB5_WITH_3DES_EDE_CBC_MD5";
    case Browser_TLSFingerprint_CipherSuite.TLS_KRB5_WITH_RC4_128_MD5:
      return "TLS_KRB5_WITH_RC4_128_MD5";
    case Browser_TLSFingerprint_CipherSuite.TLS_KRB5_WITH_IDEA_CBC_MD5:
      return "TLS_KRB5_WITH_IDEA_CBC_MD5";
    case Browser_TLSFingerprint_CipherSuite.TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA:
      return "TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_KRB5_EXPORT_WITH_RC2_CBC_40_SHA:
      return "TLS_KRB5_EXPORT_WITH_RC2_CBC_40_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_KRB5_EXPORT_WITH_RC4_40_SHA:
      return "TLS_KRB5_EXPORT_WITH_RC4_40_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5:
      return "TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5";
    case Browser_TLSFingerprint_CipherSuite.TLS_KRB5_EXPORT_WITH_RC2_CBC_40_MD5:
      return "TLS_KRB5_EXPORT_WITH_RC2_CBC_40_MD5";
    case Browser_TLSFingerprint_CipherSuite.TLS_KRB5_EXPORT_WITH_RC4_40_MD5:
      return "TLS_KRB5_EXPORT_WITH_RC4_40_MD5";
    case Browser_TLSFingerprint_CipherSuite.TLS_PSK_WITH_NULL_SHA:
      return "TLS_PSK_WITH_NULL_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_DHE_PSK_WITH_NULL_SHA:
      return "TLS_DHE_PSK_WITH_NULL_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_RSA_PSK_WITH_NULL_SHA:
      return "TLS_RSA_PSK_WITH_NULL_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_RSA_WITH_AES_128_CBC_SHA:
      return "TLS_RSA_WITH_AES_128_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_DH_DSS_WITH_AES_128_CBC_SHA:
      return "TLS_DH_DSS_WITH_AES_128_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_DH_RSA_WITH_AES_128_CBC_SHA:
      return "TLS_DH_RSA_WITH_AES_128_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_DHE_DSS_WITH_AES_128_CBC_SHA:
      return "TLS_DHE_DSS_WITH_AES_128_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_DHE_RSA_WITH_AES_128_CBC_SHA:
      return "TLS_DHE_RSA_WITH_AES_128_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_DH_anon_WITH_AES_128_CBC_SHA:
      return "TLS_DH_anon_WITH_AES_128_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_RSA_WITH_AES_256_CBC_SHA:
      return "TLS_RSA_WITH_AES_256_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_DH_DSS_WITH_AES_256_CBC_SHA:
      return "TLS_DH_DSS_WITH_AES_256_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_DH_RSA_WITH_AES_256_CBC_SHA:
      return "TLS_DH_RSA_WITH_AES_256_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_DHE_DSS_WITH_AES_256_CBC_SHA:
      return "TLS_DHE_DSS_WITH_AES_256_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_DHE_RSA_WITH_AES_256_CBC_SHA:
      return "TLS_DHE_RSA_WITH_AES_256_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_DH_anon_WITH_AES_256_CBC_SHA:
      return "TLS_DH_anon_WITH_AES_256_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_RSA_WITH_NULL_SHA256:
      return "TLS_RSA_WITH_NULL_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_RSA_WITH_AES_128_CBC_SHA256:
      return "TLS_RSA_WITH_AES_128_CBC_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_RSA_WITH_AES_256_CBC_SHA256:
      return "TLS_RSA_WITH_AES_256_CBC_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_DH_DSS_WITH_AES_128_CBC_SHA256:
      return "TLS_DH_DSS_WITH_AES_128_CBC_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_DH_RSA_WITH_AES_128_CBC_SHA256:
      return "TLS_DH_RSA_WITH_AES_128_CBC_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_DHE_DSS_WITH_AES_128_CBC_SHA256:
      return "TLS_DHE_DSS_WITH_AES_128_CBC_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_RSA_WITH_CAMELLIA_128_CBC_SHA:
      return "TLS_RSA_WITH_CAMELLIA_128_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA:
      return "TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA:
      return "TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA:
      return "TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA:
      return "TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA:
      return "TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_DHE_RSA_WITH_AES_128_CBC_SHA256:
      return "TLS_DHE_RSA_WITH_AES_128_CBC_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_DH_DSS_WITH_AES_256_CBC_SHA256:
      return "TLS_DH_DSS_WITH_AES_256_CBC_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_DH_RSA_WITH_AES_256_CBC_SHA256:
      return "TLS_DH_RSA_WITH_AES_256_CBC_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_DHE_DSS_WITH_AES_256_CBC_SHA256:
      return "TLS_DHE_DSS_WITH_AES_256_CBC_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_DHE_RSA_WITH_AES_256_CBC_SHA256:
      return "TLS_DHE_RSA_WITH_AES_256_CBC_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_DH_anon_WITH_AES_128_CBC_SHA256:
      return "TLS_DH_anon_WITH_AES_128_CBC_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_DH_anon_WITH_AES_256_CBC_SHA256:
      return "TLS_DH_anon_WITH_AES_256_CBC_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_RSA_WITH_CAMELLIA_256_CBC_SHA:
      return "TLS_RSA_WITH_CAMELLIA_256_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA:
      return "TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA:
      return "TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA:
      return "TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA:
      return "TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA:
      return "TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_PSK_WITH_RC4_128_SHA:
      return "TLS_PSK_WITH_RC4_128_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_PSK_WITH_3DES_EDE_CBC_SHA:
      return "TLS_PSK_WITH_3DES_EDE_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_PSK_WITH_AES_128_CBC_SHA:
      return "TLS_PSK_WITH_AES_128_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_PSK_WITH_AES_256_CBC_SHA:
      return "TLS_PSK_WITH_AES_256_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_DHE_PSK_WITH_RC4_128_SHA:
      return "TLS_DHE_PSK_WITH_RC4_128_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA:
      return "TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_DHE_PSK_WITH_AES_128_CBC_SHA:
      return "TLS_DHE_PSK_WITH_AES_128_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_DHE_PSK_WITH_AES_256_CBC_SHA:
      return "TLS_DHE_PSK_WITH_AES_256_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_RSA_PSK_WITH_RC4_128_SHA:
      return "TLS_RSA_PSK_WITH_RC4_128_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA:
      return "TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_RSA_PSK_WITH_AES_128_CBC_SHA:
      return "TLS_RSA_PSK_WITH_AES_128_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_RSA_PSK_WITH_AES_256_CBC_SHA:
      return "TLS_RSA_PSK_WITH_AES_256_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_RSA_WITH_SEED_CBC_SHA:
      return "TLS_RSA_WITH_SEED_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_DH_DSS_WITH_SEED_CBC_SHA:
      return "TLS_DH_DSS_WITH_SEED_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_DH_RSA_WITH_SEED_CBC_SHA:
      return "TLS_DH_RSA_WITH_SEED_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_DHE_DSS_WITH_SEED_CBC_SHA:
      return "TLS_DHE_DSS_WITH_SEED_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_DHE_RSA_WITH_SEED_CBC_SHA:
      return "TLS_DHE_RSA_WITH_SEED_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_DH_anon_WITH_SEED_CBC_SHA:
      return "TLS_DH_anon_WITH_SEED_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_RSA_WITH_AES_128_GCM_SHA256:
      return "TLS_RSA_WITH_AES_128_GCM_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_RSA_WITH_AES_256_GCM_SHA384:
      return "TLS_RSA_WITH_AES_256_GCM_SHA384";
    case Browser_TLSFingerprint_CipherSuite.TLS_DHE_RSA_WITH_AES_128_GCM_SHA256:
      return "TLS_DHE_RSA_WITH_AES_128_GCM_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_DHE_RSA_WITH_AES_256_GCM_SHA384:
      return "TLS_DHE_RSA_WITH_AES_256_GCM_SHA384";
    case Browser_TLSFingerprint_CipherSuite.TLS_DH_RSA_WITH_AES_128_GCM_SHA256:
      return "TLS_DH_RSA_WITH_AES_128_GCM_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_DH_RSA_WITH_AES_256_GCM_SHA384:
      return "TLS_DH_RSA_WITH_AES_256_GCM_SHA384";
    case Browser_TLSFingerprint_CipherSuite.TLS_DHE_DSS_WITH_AES_128_GCM_SHA256:
      return "TLS_DHE_DSS_WITH_AES_128_GCM_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_DHE_DSS_WITH_AES_256_GCM_SHA384:
      return "TLS_DHE_DSS_WITH_AES_256_GCM_SHA384";
    case Browser_TLSFingerprint_CipherSuite.TLS_DH_DSS_WITH_AES_128_GCM_SHA256:
      return "TLS_DH_DSS_WITH_AES_128_GCM_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_DH_DSS_WITH_AES_256_GCM_SHA384:
      return "TLS_DH_DSS_WITH_AES_256_GCM_SHA384";
    case Browser_TLSFingerprint_CipherSuite.TLS_DH_anon_WITH_AES_128_GCM_SHA256:
      return "TLS_DH_anon_WITH_AES_128_GCM_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_DH_anon_WITH_AES_256_GCM_SHA384:
      return "TLS_DH_anon_WITH_AES_256_GCM_SHA384";
    case Browser_TLSFingerprint_CipherSuite.TLS_PSK_WITH_AES_128_GCM_SHA256:
      return "TLS_PSK_WITH_AES_128_GCM_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_PSK_WITH_AES_256_GCM_SHA384:
      return "TLS_PSK_WITH_AES_256_GCM_SHA384";
    case Browser_TLSFingerprint_CipherSuite.TLS_DHE_PSK_WITH_AES_128_GCM_SHA256:
      return "TLS_DHE_PSK_WITH_AES_128_GCM_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_DHE_PSK_WITH_AES_256_GCM_SHA384:
      return "TLS_DHE_PSK_WITH_AES_256_GCM_SHA384";
    case Browser_TLSFingerprint_CipherSuite.TLS_RSA_PSK_WITH_AES_128_GCM_SHA256:
      return "TLS_RSA_PSK_WITH_AES_128_GCM_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_RSA_PSK_WITH_AES_256_GCM_SHA384:
      return "TLS_RSA_PSK_WITH_AES_256_GCM_SHA384";
    case Browser_TLSFingerprint_CipherSuite.TLS_PSK_WITH_AES_128_CBC_SHA256:
      return "TLS_PSK_WITH_AES_128_CBC_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_PSK_WITH_AES_256_CBC_SHA384:
      return "TLS_PSK_WITH_AES_256_CBC_SHA384";
    case Browser_TLSFingerprint_CipherSuite.TLS_PSK_WITH_NULL_SHA256:
      return "TLS_PSK_WITH_NULL_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_PSK_WITH_NULL_SHA384:
      return "TLS_PSK_WITH_NULL_SHA384";
    case Browser_TLSFingerprint_CipherSuite.TLS_DHE_PSK_WITH_AES_128_CBC_SHA256:
      return "TLS_DHE_PSK_WITH_AES_128_CBC_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_DHE_PSK_WITH_AES_256_CBC_SHA384:
      return "TLS_DHE_PSK_WITH_AES_256_CBC_SHA384";
    case Browser_TLSFingerprint_CipherSuite.TLS_DHE_PSK_WITH_NULL_SHA256:
      return "TLS_DHE_PSK_WITH_NULL_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_DHE_PSK_WITH_NULL_SHA384:
      return "TLS_DHE_PSK_WITH_NULL_SHA384";
    case Browser_TLSFingerprint_CipherSuite.TLS_RSA_PSK_WITH_AES_128_CBC_SHA256:
      return "TLS_RSA_PSK_WITH_AES_128_CBC_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_RSA_PSK_WITH_AES_256_CBC_SHA384:
      return "TLS_RSA_PSK_WITH_AES_256_CBC_SHA384";
    case Browser_TLSFingerprint_CipherSuite.TLS_RSA_PSK_WITH_NULL_SHA256:
      return "TLS_RSA_PSK_WITH_NULL_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_RSA_PSK_WITH_NULL_SHA384:
      return "TLS_RSA_PSK_WITH_NULL_SHA384";
    case Browser_TLSFingerprint_CipherSuite.TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256:
      return "TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256:
      return "TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256:
      return "TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256:
      return "TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256:
      return "TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA256:
      return "TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256:
      return "TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256:
      return "TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256:
      return "TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256:
      return "TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256:
      return "TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA256:
      return "TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_SM4_GCM_SM3:
      return "TLS_SM4_GCM_SM3";
    case Browser_TLSFingerprint_CipherSuite.TLS_SM4_CCM_SM3:
      return "TLS_SM4_CCM_SM3";
    case Browser_TLSFingerprint_CipherSuite.TLS_EMPTY_RENEGOTIATION_INFO_SCSV:
      return "TLS_EMPTY_RENEGOTIATION_INFO_SCSV";
    case Browser_TLSFingerprint_CipherSuite.Reserved:
      return "Reserved";
    case Browser_TLSFingerprint_CipherSuite.Unassigned:
      return "Unassigned";
    case Browser_TLSFingerprint_CipherSuite.TLS_AES_128_GCM_SHA256:
      return "TLS_AES_128_GCM_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_AES_256_GCM_SHA384:
      return "TLS_AES_256_GCM_SHA384";
    case Browser_TLSFingerprint_CipherSuite.TLS_CHACHA20_POLY1305_SHA256:
      return "TLS_CHACHA20_POLY1305_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_AES_128_CCM_SHA256:
      return "TLS_AES_128_CCM_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_AES_128_CCM_8_SHA256:
      return "TLS_AES_128_CCM_8_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_AEGIS_256_SHA384:
      return "TLS_AEGIS_256_SHA384";
    case Browser_TLSFingerprint_CipherSuite.TLS_AEGIS_128L_SHA256:
      return "TLS_AEGIS_128L_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_FALLBACK_SCSV:
      return "TLS_FALLBACK_SCSV";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDH_ECDSA_WITH_NULL_SHA:
      return "TLS_ECDH_ECDSA_WITH_NULL_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDH_ECDSA_WITH_RC4_128_SHA:
      return "TLS_ECDH_ECDSA_WITH_RC4_128_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA:
      return "TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA:
      return "TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA:
      return "TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_ECDSA_WITH_NULL_SHA:
      return "TLS_ECDHE_ECDSA_WITH_NULL_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_ECDSA_WITH_RC4_128_SHA:
      return "TLS_ECDHE_ECDSA_WITH_RC4_128_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA:
      return "TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA:
      return "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA:
      return "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDH_RSA_WITH_NULL_SHA:
      return "TLS_ECDH_RSA_WITH_NULL_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDH_RSA_WITH_RC4_128_SHA:
      return "TLS_ECDH_RSA_WITH_RC4_128_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA:
      return "TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDH_RSA_WITH_AES_128_CBC_SHA:
      return "TLS_ECDH_RSA_WITH_AES_128_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDH_RSA_WITH_AES_256_CBC_SHA:
      return "TLS_ECDH_RSA_WITH_AES_256_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_RSA_WITH_NULL_SHA:
      return "TLS_ECDHE_RSA_WITH_NULL_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_RSA_WITH_RC4_128_SHA:
      return "TLS_ECDHE_RSA_WITH_RC4_128_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA:
      return "TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA:
      return "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA:
      return "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDH_anon_WITH_NULL_SHA:
      return "TLS_ECDH_anon_WITH_NULL_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDH_anon_WITH_RC4_128_SHA:
      return "TLS_ECDH_anon_WITH_RC4_128_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA:
      return "TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDH_anon_WITH_AES_128_CBC_SHA:
      return "TLS_ECDH_anon_WITH_AES_128_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDH_anon_WITH_AES_256_CBC_SHA:
      return "TLS_ECDH_anon_WITH_AES_256_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_SRP_SHA_WITH_3DES_EDE_CBC_SHA:
      return "TLS_SRP_SHA_WITH_3DES_EDE_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA:
      return "TLS_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA:
      return "TLS_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_SRP_SHA_WITH_AES_128_CBC_SHA:
      return "TLS_SRP_SHA_WITH_AES_128_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_SRP_SHA_RSA_WITH_AES_128_CBC_SHA:
      return "TLS_SRP_SHA_RSA_WITH_AES_128_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_SRP_SHA_DSS_WITH_AES_128_CBC_SHA:
      return "TLS_SRP_SHA_DSS_WITH_AES_128_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_SRP_SHA_WITH_AES_256_CBC_SHA:
      return "TLS_SRP_SHA_WITH_AES_256_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_SRP_SHA_RSA_WITH_AES_256_CBC_SHA:
      return "TLS_SRP_SHA_RSA_WITH_AES_256_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_SRP_SHA_DSS_WITH_AES_256_CBC_SHA:
      return "TLS_SRP_SHA_DSS_WITH_AES_256_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256:
      return "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384:
      return "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256:
      return "TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384:
      return "TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256:
      return "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384:
      return "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256:
      return "TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384:
      return "TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256:
      return "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384:
      return "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256:
      return "TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384:
      return "TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256:
      return "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384:
      return "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256:
      return "TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384:
      return "TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_PSK_WITH_RC4_128_SHA:
      return "TLS_ECDHE_PSK_WITH_RC4_128_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA:
      return "TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA:
      return "TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA:
      return "TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256:
      return "TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384:
      return "TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_PSK_WITH_NULL_SHA:
      return "TLS_ECDHE_PSK_WITH_NULL_SHA";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_PSK_WITH_NULL_SHA256:
      return "TLS_ECDHE_PSK_WITH_NULL_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_PSK_WITH_NULL_SHA384:
      return "TLS_ECDHE_PSK_WITH_NULL_SHA384";
    case Browser_TLSFingerprint_CipherSuite.TLS_RSA_WITH_ARIA_128_CBC_SHA256:
      return "TLS_RSA_WITH_ARIA_128_CBC_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_RSA_WITH_ARIA_256_CBC_SHA384:
      return "TLS_RSA_WITH_ARIA_256_CBC_SHA384";
    case Browser_TLSFingerprint_CipherSuite.TLS_DH_DSS_WITH_ARIA_128_CBC_SHA256:
      return "TLS_DH_DSS_WITH_ARIA_128_CBC_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_DH_DSS_WITH_ARIA_256_CBC_SHA384:
      return "TLS_DH_DSS_WITH_ARIA_256_CBC_SHA384";
    case Browser_TLSFingerprint_CipherSuite.TLS_DH_RSA_WITH_ARIA_128_CBC_SHA256:
      return "TLS_DH_RSA_WITH_ARIA_128_CBC_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_DH_RSA_WITH_ARIA_256_CBC_SHA384:
      return "TLS_DH_RSA_WITH_ARIA_256_CBC_SHA384";
    case Browser_TLSFingerprint_CipherSuite.TLS_DHE_DSS_WITH_ARIA_128_CBC_SHA256:
      return "TLS_DHE_DSS_WITH_ARIA_128_CBC_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_DHE_DSS_WITH_ARIA_256_CBC_SHA384:
      return "TLS_DHE_DSS_WITH_ARIA_256_CBC_SHA384";
    case Browser_TLSFingerprint_CipherSuite.TLS_DHE_RSA_WITH_ARIA_128_CBC_SHA256:
      return "TLS_DHE_RSA_WITH_ARIA_128_CBC_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_DHE_RSA_WITH_ARIA_256_CBC_SHA384:
      return "TLS_DHE_RSA_WITH_ARIA_256_CBC_SHA384";
    case Browser_TLSFingerprint_CipherSuite.TLS_DH_anon_WITH_ARIA_128_CBC_SHA256:
      return "TLS_DH_anon_WITH_ARIA_128_CBC_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_DH_anon_WITH_ARIA_256_CBC_SHA384:
      return "TLS_DH_anon_WITH_ARIA_256_CBC_SHA384";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_ECDSA_WITH_ARIA_128_CBC_SHA256:
      return "TLS_ECDHE_ECDSA_WITH_ARIA_128_CBC_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_ECDSA_WITH_ARIA_256_CBC_SHA384:
      return "TLS_ECDHE_ECDSA_WITH_ARIA_256_CBC_SHA384";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDH_ECDSA_WITH_ARIA_128_CBC_SHA256:
      return "TLS_ECDH_ECDSA_WITH_ARIA_128_CBC_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDH_ECDSA_WITH_ARIA_256_CBC_SHA384:
      return "TLS_ECDH_ECDSA_WITH_ARIA_256_CBC_SHA384";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_RSA_WITH_ARIA_128_CBC_SHA256:
      return "TLS_ECDHE_RSA_WITH_ARIA_128_CBC_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_RSA_WITH_ARIA_256_CBC_SHA384:
      return "TLS_ECDHE_RSA_WITH_ARIA_256_CBC_SHA384";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDH_RSA_WITH_ARIA_128_CBC_SHA256:
      return "TLS_ECDH_RSA_WITH_ARIA_128_CBC_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDH_RSA_WITH_ARIA_256_CBC_SHA384:
      return "TLS_ECDH_RSA_WITH_ARIA_256_CBC_SHA384";
    case Browser_TLSFingerprint_CipherSuite.TLS_RSA_WITH_ARIA_128_GCM_SHA256:
      return "TLS_RSA_WITH_ARIA_128_GCM_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_RSA_WITH_ARIA_256_GCM_SHA384:
      return "TLS_RSA_WITH_ARIA_256_GCM_SHA384";
    case Browser_TLSFingerprint_CipherSuite.TLS_DHE_RSA_WITH_ARIA_128_GCM_SHA256:
      return "TLS_DHE_RSA_WITH_ARIA_128_GCM_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_DHE_RSA_WITH_ARIA_256_GCM_SHA384:
      return "TLS_DHE_RSA_WITH_ARIA_256_GCM_SHA384";
    case Browser_TLSFingerprint_CipherSuite.TLS_DH_RSA_WITH_ARIA_128_GCM_SHA256:
      return "TLS_DH_RSA_WITH_ARIA_128_GCM_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_DH_RSA_WITH_ARIA_256_GCM_SHA384:
      return "TLS_DH_RSA_WITH_ARIA_256_GCM_SHA384";
    case Browser_TLSFingerprint_CipherSuite.TLS_DHE_DSS_WITH_ARIA_128_GCM_SHA256:
      return "TLS_DHE_DSS_WITH_ARIA_128_GCM_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_DHE_DSS_WITH_ARIA_256_GCM_SHA384:
      return "TLS_DHE_DSS_WITH_ARIA_256_GCM_SHA384";
    case Browser_TLSFingerprint_CipherSuite.TLS_DH_DSS_WITH_ARIA_128_GCM_SHA256:
      return "TLS_DH_DSS_WITH_ARIA_128_GCM_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_DH_DSS_WITH_ARIA_256_GCM_SHA384:
      return "TLS_DH_DSS_WITH_ARIA_256_GCM_SHA384";
    case Browser_TLSFingerprint_CipherSuite.TLS_DH_anon_WITH_ARIA_128_GCM_SHA256:
      return "TLS_DH_anon_WITH_ARIA_128_GCM_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_DH_anon_WITH_ARIA_256_GCM_SHA384:
      return "TLS_DH_anon_WITH_ARIA_256_GCM_SHA384";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_ECDSA_WITH_ARIA_128_GCM_SHA256:
      return "TLS_ECDHE_ECDSA_WITH_ARIA_128_GCM_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_ECDSA_WITH_ARIA_256_GCM_SHA384:
      return "TLS_ECDHE_ECDSA_WITH_ARIA_256_GCM_SHA384";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDH_ECDSA_WITH_ARIA_128_GCM_SHA256:
      return "TLS_ECDH_ECDSA_WITH_ARIA_128_GCM_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDH_ECDSA_WITH_ARIA_256_GCM_SHA384:
      return "TLS_ECDH_ECDSA_WITH_ARIA_256_GCM_SHA384";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_RSA_WITH_ARIA_128_GCM_SHA256:
      return "TLS_ECDHE_RSA_WITH_ARIA_128_GCM_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_RSA_WITH_ARIA_256_GCM_SHA384:
      return "TLS_ECDHE_RSA_WITH_ARIA_256_GCM_SHA384";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDH_RSA_WITH_ARIA_128_GCM_SHA256:
      return "TLS_ECDH_RSA_WITH_ARIA_128_GCM_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDH_RSA_WITH_ARIA_256_GCM_SHA384:
      return "TLS_ECDH_RSA_WITH_ARIA_256_GCM_SHA384";
    case Browser_TLSFingerprint_CipherSuite.TLS_PSK_WITH_ARIA_128_CBC_SHA256:
      return "TLS_PSK_WITH_ARIA_128_CBC_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_PSK_WITH_ARIA_256_CBC_SHA384:
      return "TLS_PSK_WITH_ARIA_256_CBC_SHA384";
    case Browser_TLSFingerprint_CipherSuite.TLS_DHE_PSK_WITH_ARIA_128_CBC_SHA256:
      return "TLS_DHE_PSK_WITH_ARIA_128_CBC_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_DHE_PSK_WITH_ARIA_256_CBC_SHA384:
      return "TLS_DHE_PSK_WITH_ARIA_256_CBC_SHA384";
    case Browser_TLSFingerprint_CipherSuite.TLS_RSA_PSK_WITH_ARIA_128_CBC_SHA256:
      return "TLS_RSA_PSK_WITH_ARIA_128_CBC_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_RSA_PSK_WITH_ARIA_256_CBC_SHA384:
      return "TLS_RSA_PSK_WITH_ARIA_256_CBC_SHA384";
    case Browser_TLSFingerprint_CipherSuite.TLS_PSK_WITH_ARIA_128_GCM_SHA256:
      return "TLS_PSK_WITH_ARIA_128_GCM_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_PSK_WITH_ARIA_256_GCM_SHA384:
      return "TLS_PSK_WITH_ARIA_256_GCM_SHA384";
    case Browser_TLSFingerprint_CipherSuite.TLS_DHE_PSK_WITH_ARIA_128_GCM_SHA256:
      return "TLS_DHE_PSK_WITH_ARIA_128_GCM_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_DHE_PSK_WITH_ARIA_256_GCM_SHA384:
      return "TLS_DHE_PSK_WITH_ARIA_256_GCM_SHA384";
    case Browser_TLSFingerprint_CipherSuite.TLS_RSA_PSK_WITH_ARIA_128_GCM_SHA256:
      return "TLS_RSA_PSK_WITH_ARIA_128_GCM_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_RSA_PSK_WITH_ARIA_256_GCM_SHA384:
      return "TLS_RSA_PSK_WITH_ARIA_256_GCM_SHA384";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_PSK_WITH_ARIA_128_CBC_SHA256:
      return "TLS_ECDHE_PSK_WITH_ARIA_128_CBC_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_PSK_WITH_ARIA_256_CBC_SHA384:
      return "TLS_ECDHE_PSK_WITH_ARIA_256_CBC_SHA384";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256:
      return "TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384:
      return "TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256:
      return "TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384:
      return "TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256:
      return "TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384:
      return "TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256:
      return "TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384:
      return "TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384";
    case Browser_TLSFingerprint_CipherSuite.TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256:
      return "TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384:
      return "TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384";
    case Browser_TLSFingerprint_CipherSuite.TLS_DHE_RSA_WITH_CAMELLIA_128_GCM_SHA256:
      return "TLS_DHE_RSA_WITH_CAMELLIA_128_GCM_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_DHE_RSA_WITH_CAMELLIA_256_GCM_SHA384:
      return "TLS_DHE_RSA_WITH_CAMELLIA_256_GCM_SHA384";
    case Browser_TLSFingerprint_CipherSuite.TLS_DH_RSA_WITH_CAMELLIA_128_GCM_SHA256:
      return "TLS_DH_RSA_WITH_CAMELLIA_128_GCM_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_DH_RSA_WITH_CAMELLIA_256_GCM_SHA384:
      return "TLS_DH_RSA_WITH_CAMELLIA_256_GCM_SHA384";
    case Browser_TLSFingerprint_CipherSuite.TLS_DHE_DSS_WITH_CAMELLIA_128_GCM_SHA256:
      return "TLS_DHE_DSS_WITH_CAMELLIA_128_GCM_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_DHE_DSS_WITH_CAMELLIA_256_GCM_SHA384:
      return "TLS_DHE_DSS_WITH_CAMELLIA_256_GCM_SHA384";
    case Browser_TLSFingerprint_CipherSuite.TLS_DH_DSS_WITH_CAMELLIA_128_GCM_SHA256:
      return "TLS_DH_DSS_WITH_CAMELLIA_128_GCM_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_DH_DSS_WITH_CAMELLIA_256_GCM_SHA384:
      return "TLS_DH_DSS_WITH_CAMELLIA_256_GCM_SHA384";
    case Browser_TLSFingerprint_CipherSuite.TLS_DH_anon_WITH_CAMELLIA_128_GCM_SHA256:
      return "TLS_DH_anon_WITH_CAMELLIA_128_GCM_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_DH_anon_WITH_CAMELLIA_256_GCM_SHA384:
      return "TLS_DH_anon_WITH_CAMELLIA_256_GCM_SHA384";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256:
      return "TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_GCM_SHA384:
      return "TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_GCM_SHA384";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256:
      return "TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384:
      return "TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256:
      return "TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_RSA_WITH_CAMELLIA_256_GCM_SHA384:
      return "TLS_ECDHE_RSA_WITH_CAMELLIA_256_GCM_SHA384";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256:
      return "TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384:
      return "TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384";
    case Browser_TLSFingerprint_CipherSuite.TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256:
      return "TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384:
      return "TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384";
    case Browser_TLSFingerprint_CipherSuite.TLS_DHE_PSK_WITH_CAMELLIA_128_GCM_SHA256:
      return "TLS_DHE_PSK_WITH_CAMELLIA_128_GCM_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_DHE_PSK_WITH_CAMELLIA_256_GCM_SHA384:
      return "TLS_DHE_PSK_WITH_CAMELLIA_256_GCM_SHA384";
    case Browser_TLSFingerprint_CipherSuite.TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256:
      return "TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384:
      return "TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384";
    case Browser_TLSFingerprint_CipherSuite.TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256:
      return "TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384:
      return "TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384";
    case Browser_TLSFingerprint_CipherSuite.TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256:
      return "TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384:
      return "TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384";
    case Browser_TLSFingerprint_CipherSuite.TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256:
      return "TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384:
      return "TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256:
      return "TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384:
      return "TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384";
    case Browser_TLSFingerprint_CipherSuite.TLS_RSA_WITH_AES_128_CCM:
      return "TLS_RSA_WITH_AES_128_CCM";
    case Browser_TLSFingerprint_CipherSuite.TLS_RSA_WITH_AES_256_CCM:
      return "TLS_RSA_WITH_AES_256_CCM";
    case Browser_TLSFingerprint_CipherSuite.TLS_DHE_RSA_WITH_AES_128_CCM:
      return "TLS_DHE_RSA_WITH_AES_128_CCM";
    case Browser_TLSFingerprint_CipherSuite.TLS_DHE_RSA_WITH_AES_256_CCM:
      return "TLS_DHE_RSA_WITH_AES_256_CCM";
    case Browser_TLSFingerprint_CipherSuite.TLS_RSA_WITH_AES_128_CCM_8:
      return "TLS_RSA_WITH_AES_128_CCM_8";
    case Browser_TLSFingerprint_CipherSuite.TLS_RSA_WITH_AES_256_CCM_8:
      return "TLS_RSA_WITH_AES_256_CCM_8";
    case Browser_TLSFingerprint_CipherSuite.TLS_DHE_RSA_WITH_AES_128_CCM_8:
      return "TLS_DHE_RSA_WITH_AES_128_CCM_8";
    case Browser_TLSFingerprint_CipherSuite.TLS_DHE_RSA_WITH_AES_256_CCM_8:
      return "TLS_DHE_RSA_WITH_AES_256_CCM_8";
    case Browser_TLSFingerprint_CipherSuite.TLS_PSK_WITH_AES_128_CCM:
      return "TLS_PSK_WITH_AES_128_CCM";
    case Browser_TLSFingerprint_CipherSuite.TLS_PSK_WITH_AES_256_CCM:
      return "TLS_PSK_WITH_AES_256_CCM";
    case Browser_TLSFingerprint_CipherSuite.TLS_DHE_PSK_WITH_AES_128_CCM:
      return "TLS_DHE_PSK_WITH_AES_128_CCM";
    case Browser_TLSFingerprint_CipherSuite.TLS_DHE_PSK_WITH_AES_256_CCM:
      return "TLS_DHE_PSK_WITH_AES_256_CCM";
    case Browser_TLSFingerprint_CipherSuite.TLS_PSK_WITH_AES_128_CCM_8:
      return "TLS_PSK_WITH_AES_128_CCM_8";
    case Browser_TLSFingerprint_CipherSuite.TLS_PSK_WITH_AES_256_CCM_8:
      return "TLS_PSK_WITH_AES_256_CCM_8";
    case Browser_TLSFingerprint_CipherSuite.TLS_PSK_DHE_WITH_AES_128_CCM_8:
      return "TLS_PSK_DHE_WITH_AES_128_CCM_8";
    case Browser_TLSFingerprint_CipherSuite.TLS_PSK_DHE_WITH_AES_256_CCM_8:
      return "TLS_PSK_DHE_WITH_AES_256_CCM_8";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_128_CCM:
      return "TLS_ECDHE_ECDSA_WITH_AES_128_CCM";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_256_CCM:
      return "TLS_ECDHE_ECDSA_WITH_AES_256_CCM";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8:
      return "TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8:
      return "TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECCPWD_WITH_AES_128_GCM_SHA256:
      return "TLS_ECCPWD_WITH_AES_128_GCM_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECCPWD_WITH_AES_256_GCM_SHA384:
      return "TLS_ECCPWD_WITH_AES_256_GCM_SHA384";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECCPWD_WITH_AES_128_CCM_SHA256:
      return "TLS_ECCPWD_WITH_AES_128_CCM_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECCPWD_WITH_AES_256_CCM_SHA384:
      return "TLS_ECCPWD_WITH_AES_256_CCM_SHA384";
    case Browser_TLSFingerprint_CipherSuite.TLS_SHA256_SHA256:
      return "TLS_SHA256_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_SHA384_SHA384:
      return "TLS_SHA384_SHA384";
    case Browser_TLSFingerprint_CipherSuite.TLS_GOSTR341112_256_WITH_KUZNYECHIK_CTR_OMAC:
      return "TLS_GOSTR341112_256_WITH_KUZNYECHIK_CTR_OMAC";
    case Browser_TLSFingerprint_CipherSuite.TLS_GOSTR341112_256_WITH_MAGMA_CTR_OMAC:
      return "TLS_GOSTR341112_256_WITH_MAGMA_CTR_OMAC";
    case Browser_TLSFingerprint_CipherSuite.TLS_GOSTR341112_256_WITH_28147_CNT_IMIT:
      return "TLS_GOSTR341112_256_WITH_28147_CNT_IMIT";
    case Browser_TLSFingerprint_CipherSuite.TLS_GOSTR341112_256_WITH_KUZNYECHIK_MGM_L:
      return "TLS_GOSTR341112_256_WITH_KUZNYECHIK_MGM_L";
    case Browser_TLSFingerprint_CipherSuite.TLS_GOSTR341112_256_WITH_MAGMA_MGM_L:
      return "TLS_GOSTR341112_256_WITH_MAGMA_MGM_L";
    case Browser_TLSFingerprint_CipherSuite.TLS_GOSTR341112_256_WITH_KUZNYECHIK_MGM_S:
      return "TLS_GOSTR341112_256_WITH_KUZNYECHIK_MGM_S";
    case Browser_TLSFingerprint_CipherSuite.TLS_GOSTR341112_256_WITH_MAGMA_MGM_S:
      return "TLS_GOSTR341112_256_WITH_MAGMA_MGM_S";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256:
      return "TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256:
      return "TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256:
      return "TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_PSK_WITH_CHACHA20_POLY1305_SHA256:
      return "TLS_PSK_WITH_CHACHA20_POLY1305_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256:
      return "TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_DHE_PSK_WITH_CHACHA20_POLY1305_SHA256:
      return "TLS_DHE_PSK_WITH_CHACHA20_POLY1305_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_RSA_PSK_WITH_CHACHA20_POLY1305_SHA256:
      return "TLS_RSA_PSK_WITH_CHACHA20_POLY1305_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_PSK_WITH_AES_128_GCM_SHA256:
      return "TLS_ECDHE_PSK_WITH_AES_128_GCM_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_PSK_WITH_AES_256_GCM_SHA384:
      return "TLS_ECDHE_PSK_WITH_AES_256_GCM_SHA384";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_PSK_WITH_AES_128_CCM_8_SHA256:
      return "TLS_ECDHE_PSK_WITH_AES_128_CCM_8_SHA256";
    case Browser_TLSFingerprint_CipherSuite.TLS_ECDHE_PSK_WITH_AES_128_CCM_SHA256:
      return "TLS_ECDHE_PSK_WITH_AES_128_CCM_SHA256";
    case Browser_TLSFingerprint_CipherSuite.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** - TLS extensions: https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml */
export enum Browser_TLSFingerprint_Extensions {
  SERVER_NAME = 0,
  MAX_FRAGMENT_LENGTH = 1,
  CLIENT_CERTIFICATE_URL = 2,
  TRUSTED_CA_KEYS = 3,
  TRUNCATED_HMAC = 4,
  STATUS_REQUEST = 5,
  USER_MAPPING = 6,
  CLIENT_AUTHZ = 7,
  SERVER_AUTHZ = 8,
  CERT_TYPE = 9,
  SUPPORTED_GROUPS = 10,
  EC_POINT_FORMATS = 11,
  SRP = 12,
  SIGNATURE_ALGORITHMS = 13,
  USE_SRTP = 14,
  HEARTBEAT = 15,
  APPLICATION_LAYER_PROTOCOL_NEGOTIATION = 16,
  STATUS_REQUEST_V2 = 17,
  SIGNED_CERTIFICATE_TIMESTAMP = 18,
  CLIENT_CERTIFICATE_TYPE = 19,
  SERVER_CERTIFICATE_TYPE = 20,
  PADDING = 21,
  ENCRYPT_THEN_MAC = 22,
  EXTENDED_MASTER_SECRET = 23,
  TOKEN_BINDING = 24,
  CACHED_INFO = 25,
  TLS_LTS = 26,
  COMPRESS_CERTIFICATE = 27,
  RECORD_SIZE_LIMIT = 28,
  PWD_PROTECT = 29,
  PWD_CLEAR = 30,
  PASSWORD_SALT = 31,
  TICKET_PINNING = 32,
  TLS_CERT_WITH_EXTERN_PSK = 33,
  DELEGATED_CREDENTIAL = 34,
  SESSION_TICKET = 35,
  TLMSP = 36,
  TLMSP_PROXYING = 37,
  TLMSP_DELEGATE = 38,
  SUPPORTED_EKT_CIPHERS = 39,
  PRE_SHARED_KEY = 41,
  EARLY_DATA = 42,
  SUPPORTED_VERSIONS = 43,
  COOKIE = 44,
  PSK_KEY_EXCHANGE_MODES = 45,
  CERTIFICATE_AUTHORITIES = 47,
  OID_FILTERS = 48,
  POST_HANDSHAKE_AUTH = 49,
  SIGNATURE_ALGORITHMS_CERT = 50,
  KEY_SHARE = 51,
  TRANSPARENCY_INFO = 52,
  CONNECTION_ID_DEPRECATED = 53,
  CONNECTION_ID = 54,
  EXTERNAL_ID_HASH = 55,
  EXTERNAL_SESSION_ID = 56,
  QUIC_TRANSPORT_PARAMETERS = 57,
  TICKET_REQUEST = 58,
  DNSSEC_CHAIN = 59,
  SEQUENCE_NUMBER_ENCRYPTION_ALGORITHMS = 60,
  /** EXTENSION_APPLICATIONS_SETTINGS - src: boringssl */
  EXTENSION_APPLICATIONS_SETTINGS = 17513,
  EXTENSION_RENEGOTIATION_INFO = 65281,
  UNRECOGNIZED = -1,
}

export function browser_TLSFingerprint_ExtensionsFromJSON(object: any): Browser_TLSFingerprint_Extensions {
  switch (object) {
    case 0:
    case "SERVER_NAME":
      return Browser_TLSFingerprint_Extensions.SERVER_NAME;
    case 1:
    case "MAX_FRAGMENT_LENGTH":
      return Browser_TLSFingerprint_Extensions.MAX_FRAGMENT_LENGTH;
    case 2:
    case "CLIENT_CERTIFICATE_URL":
      return Browser_TLSFingerprint_Extensions.CLIENT_CERTIFICATE_URL;
    case 3:
    case "TRUSTED_CA_KEYS":
      return Browser_TLSFingerprint_Extensions.TRUSTED_CA_KEYS;
    case 4:
    case "TRUNCATED_HMAC":
      return Browser_TLSFingerprint_Extensions.TRUNCATED_HMAC;
    case 5:
    case "STATUS_REQUEST":
      return Browser_TLSFingerprint_Extensions.STATUS_REQUEST;
    case 6:
    case "USER_MAPPING":
      return Browser_TLSFingerprint_Extensions.USER_MAPPING;
    case 7:
    case "CLIENT_AUTHZ":
      return Browser_TLSFingerprint_Extensions.CLIENT_AUTHZ;
    case 8:
    case "SERVER_AUTHZ":
      return Browser_TLSFingerprint_Extensions.SERVER_AUTHZ;
    case 9:
    case "CERT_TYPE":
      return Browser_TLSFingerprint_Extensions.CERT_TYPE;
    case 10:
    case "SUPPORTED_GROUPS":
      return Browser_TLSFingerprint_Extensions.SUPPORTED_GROUPS;
    case 11:
    case "EC_POINT_FORMATS":
      return Browser_TLSFingerprint_Extensions.EC_POINT_FORMATS;
    case 12:
    case "SRP":
      return Browser_TLSFingerprint_Extensions.SRP;
    case 13:
    case "SIGNATURE_ALGORITHMS":
      return Browser_TLSFingerprint_Extensions.SIGNATURE_ALGORITHMS;
    case 14:
    case "USE_SRTP":
      return Browser_TLSFingerprint_Extensions.USE_SRTP;
    case 15:
    case "HEARTBEAT":
      return Browser_TLSFingerprint_Extensions.HEARTBEAT;
    case 16:
    case "APPLICATION_LAYER_PROTOCOL_NEGOTIATION":
      return Browser_TLSFingerprint_Extensions.APPLICATION_LAYER_PROTOCOL_NEGOTIATION;
    case 17:
    case "STATUS_REQUEST_V2":
      return Browser_TLSFingerprint_Extensions.STATUS_REQUEST_V2;
    case 18:
    case "SIGNED_CERTIFICATE_TIMESTAMP":
      return Browser_TLSFingerprint_Extensions.SIGNED_CERTIFICATE_TIMESTAMP;
    case 19:
    case "CLIENT_CERTIFICATE_TYPE":
      return Browser_TLSFingerprint_Extensions.CLIENT_CERTIFICATE_TYPE;
    case 20:
    case "SERVER_CERTIFICATE_TYPE":
      return Browser_TLSFingerprint_Extensions.SERVER_CERTIFICATE_TYPE;
    case 21:
    case "PADDING":
      return Browser_TLSFingerprint_Extensions.PADDING;
    case 22:
    case "ENCRYPT_THEN_MAC":
      return Browser_TLSFingerprint_Extensions.ENCRYPT_THEN_MAC;
    case 23:
    case "EXTENDED_MASTER_SECRET":
      return Browser_TLSFingerprint_Extensions.EXTENDED_MASTER_SECRET;
    case 24:
    case "TOKEN_BINDING":
      return Browser_TLSFingerprint_Extensions.TOKEN_BINDING;
    case 25:
    case "CACHED_INFO":
      return Browser_TLSFingerprint_Extensions.CACHED_INFO;
    case 26:
    case "TLS_LTS":
      return Browser_TLSFingerprint_Extensions.TLS_LTS;
    case 27:
    case "COMPRESS_CERTIFICATE":
      return Browser_TLSFingerprint_Extensions.COMPRESS_CERTIFICATE;
    case 28:
    case "RECORD_SIZE_LIMIT":
      return Browser_TLSFingerprint_Extensions.RECORD_SIZE_LIMIT;
    case 29:
    case "PWD_PROTECT":
      return Browser_TLSFingerprint_Extensions.PWD_PROTECT;
    case 30:
    case "PWD_CLEAR":
      return Browser_TLSFingerprint_Extensions.PWD_CLEAR;
    case 31:
    case "PASSWORD_SALT":
      return Browser_TLSFingerprint_Extensions.PASSWORD_SALT;
    case 32:
    case "TICKET_PINNING":
      return Browser_TLSFingerprint_Extensions.TICKET_PINNING;
    case 33:
    case "TLS_CERT_WITH_EXTERN_PSK":
      return Browser_TLSFingerprint_Extensions.TLS_CERT_WITH_EXTERN_PSK;
    case 34:
    case "DELEGATED_CREDENTIAL":
      return Browser_TLSFingerprint_Extensions.DELEGATED_CREDENTIAL;
    case 35:
    case "SESSION_TICKET":
      return Browser_TLSFingerprint_Extensions.SESSION_TICKET;
    case 36:
    case "TLMSP":
      return Browser_TLSFingerprint_Extensions.TLMSP;
    case 37:
    case "TLMSP_PROXYING":
      return Browser_TLSFingerprint_Extensions.TLMSP_PROXYING;
    case 38:
    case "TLMSP_DELEGATE":
      return Browser_TLSFingerprint_Extensions.TLMSP_DELEGATE;
    case 39:
    case "SUPPORTED_EKT_CIPHERS":
      return Browser_TLSFingerprint_Extensions.SUPPORTED_EKT_CIPHERS;
    case 41:
    case "PRE_SHARED_KEY":
      return Browser_TLSFingerprint_Extensions.PRE_SHARED_KEY;
    case 42:
    case "EARLY_DATA":
      return Browser_TLSFingerprint_Extensions.EARLY_DATA;
    case 43:
    case "SUPPORTED_VERSIONS":
      return Browser_TLSFingerprint_Extensions.SUPPORTED_VERSIONS;
    case 44:
    case "COOKIE":
      return Browser_TLSFingerprint_Extensions.COOKIE;
    case 45:
    case "PSK_KEY_EXCHANGE_MODES":
      return Browser_TLSFingerprint_Extensions.PSK_KEY_EXCHANGE_MODES;
    case 47:
    case "CERTIFICATE_AUTHORITIES":
      return Browser_TLSFingerprint_Extensions.CERTIFICATE_AUTHORITIES;
    case 48:
    case "OID_FILTERS":
      return Browser_TLSFingerprint_Extensions.OID_FILTERS;
    case 49:
    case "POST_HANDSHAKE_AUTH":
      return Browser_TLSFingerprint_Extensions.POST_HANDSHAKE_AUTH;
    case 50:
    case "SIGNATURE_ALGORITHMS_CERT":
      return Browser_TLSFingerprint_Extensions.SIGNATURE_ALGORITHMS_CERT;
    case 51:
    case "KEY_SHARE":
      return Browser_TLSFingerprint_Extensions.KEY_SHARE;
    case 52:
    case "TRANSPARENCY_INFO":
      return Browser_TLSFingerprint_Extensions.TRANSPARENCY_INFO;
    case 53:
    case "CONNECTION_ID_DEPRECATED":
      return Browser_TLSFingerprint_Extensions.CONNECTION_ID_DEPRECATED;
    case 54:
    case "CONNECTION_ID":
      return Browser_TLSFingerprint_Extensions.CONNECTION_ID;
    case 55:
    case "EXTERNAL_ID_HASH":
      return Browser_TLSFingerprint_Extensions.EXTERNAL_ID_HASH;
    case 56:
    case "EXTERNAL_SESSION_ID":
      return Browser_TLSFingerprint_Extensions.EXTERNAL_SESSION_ID;
    case 57:
    case "QUIC_TRANSPORT_PARAMETERS":
      return Browser_TLSFingerprint_Extensions.QUIC_TRANSPORT_PARAMETERS;
    case 58:
    case "TICKET_REQUEST":
      return Browser_TLSFingerprint_Extensions.TICKET_REQUEST;
    case 59:
    case "DNSSEC_CHAIN":
      return Browser_TLSFingerprint_Extensions.DNSSEC_CHAIN;
    case 60:
    case "SEQUENCE_NUMBER_ENCRYPTION_ALGORITHMS":
      return Browser_TLSFingerprint_Extensions.SEQUENCE_NUMBER_ENCRYPTION_ALGORITHMS;
    case 17513:
    case "EXTENSION_APPLICATIONS_SETTINGS":
      return Browser_TLSFingerprint_Extensions.EXTENSION_APPLICATIONS_SETTINGS;
    case 65281:
    case "EXTENSION_RENEGOTIATION_INFO":
      return Browser_TLSFingerprint_Extensions.EXTENSION_RENEGOTIATION_INFO;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Browser_TLSFingerprint_Extensions.UNRECOGNIZED;
  }
}

export function browser_TLSFingerprint_ExtensionsToJSON(object: Browser_TLSFingerprint_Extensions): string {
  switch (object) {
    case Browser_TLSFingerprint_Extensions.SERVER_NAME:
      return "SERVER_NAME";
    case Browser_TLSFingerprint_Extensions.MAX_FRAGMENT_LENGTH:
      return "MAX_FRAGMENT_LENGTH";
    case Browser_TLSFingerprint_Extensions.CLIENT_CERTIFICATE_URL:
      return "CLIENT_CERTIFICATE_URL";
    case Browser_TLSFingerprint_Extensions.TRUSTED_CA_KEYS:
      return "TRUSTED_CA_KEYS";
    case Browser_TLSFingerprint_Extensions.TRUNCATED_HMAC:
      return "TRUNCATED_HMAC";
    case Browser_TLSFingerprint_Extensions.STATUS_REQUEST:
      return "STATUS_REQUEST";
    case Browser_TLSFingerprint_Extensions.USER_MAPPING:
      return "USER_MAPPING";
    case Browser_TLSFingerprint_Extensions.CLIENT_AUTHZ:
      return "CLIENT_AUTHZ";
    case Browser_TLSFingerprint_Extensions.SERVER_AUTHZ:
      return "SERVER_AUTHZ";
    case Browser_TLSFingerprint_Extensions.CERT_TYPE:
      return "CERT_TYPE";
    case Browser_TLSFingerprint_Extensions.SUPPORTED_GROUPS:
      return "SUPPORTED_GROUPS";
    case Browser_TLSFingerprint_Extensions.EC_POINT_FORMATS:
      return "EC_POINT_FORMATS";
    case Browser_TLSFingerprint_Extensions.SRP:
      return "SRP";
    case Browser_TLSFingerprint_Extensions.SIGNATURE_ALGORITHMS:
      return "SIGNATURE_ALGORITHMS";
    case Browser_TLSFingerprint_Extensions.USE_SRTP:
      return "USE_SRTP";
    case Browser_TLSFingerprint_Extensions.HEARTBEAT:
      return "HEARTBEAT";
    case Browser_TLSFingerprint_Extensions.APPLICATION_LAYER_PROTOCOL_NEGOTIATION:
      return "APPLICATION_LAYER_PROTOCOL_NEGOTIATION";
    case Browser_TLSFingerprint_Extensions.STATUS_REQUEST_V2:
      return "STATUS_REQUEST_V2";
    case Browser_TLSFingerprint_Extensions.SIGNED_CERTIFICATE_TIMESTAMP:
      return "SIGNED_CERTIFICATE_TIMESTAMP";
    case Browser_TLSFingerprint_Extensions.CLIENT_CERTIFICATE_TYPE:
      return "CLIENT_CERTIFICATE_TYPE";
    case Browser_TLSFingerprint_Extensions.SERVER_CERTIFICATE_TYPE:
      return "SERVER_CERTIFICATE_TYPE";
    case Browser_TLSFingerprint_Extensions.PADDING:
      return "PADDING";
    case Browser_TLSFingerprint_Extensions.ENCRYPT_THEN_MAC:
      return "ENCRYPT_THEN_MAC";
    case Browser_TLSFingerprint_Extensions.EXTENDED_MASTER_SECRET:
      return "EXTENDED_MASTER_SECRET";
    case Browser_TLSFingerprint_Extensions.TOKEN_BINDING:
      return "TOKEN_BINDING";
    case Browser_TLSFingerprint_Extensions.CACHED_INFO:
      return "CACHED_INFO";
    case Browser_TLSFingerprint_Extensions.TLS_LTS:
      return "TLS_LTS";
    case Browser_TLSFingerprint_Extensions.COMPRESS_CERTIFICATE:
      return "COMPRESS_CERTIFICATE";
    case Browser_TLSFingerprint_Extensions.RECORD_SIZE_LIMIT:
      return "RECORD_SIZE_LIMIT";
    case Browser_TLSFingerprint_Extensions.PWD_PROTECT:
      return "PWD_PROTECT";
    case Browser_TLSFingerprint_Extensions.PWD_CLEAR:
      return "PWD_CLEAR";
    case Browser_TLSFingerprint_Extensions.PASSWORD_SALT:
      return "PASSWORD_SALT";
    case Browser_TLSFingerprint_Extensions.TICKET_PINNING:
      return "TICKET_PINNING";
    case Browser_TLSFingerprint_Extensions.TLS_CERT_WITH_EXTERN_PSK:
      return "TLS_CERT_WITH_EXTERN_PSK";
    case Browser_TLSFingerprint_Extensions.DELEGATED_CREDENTIAL:
      return "DELEGATED_CREDENTIAL";
    case Browser_TLSFingerprint_Extensions.SESSION_TICKET:
      return "SESSION_TICKET";
    case Browser_TLSFingerprint_Extensions.TLMSP:
      return "TLMSP";
    case Browser_TLSFingerprint_Extensions.TLMSP_PROXYING:
      return "TLMSP_PROXYING";
    case Browser_TLSFingerprint_Extensions.TLMSP_DELEGATE:
      return "TLMSP_DELEGATE";
    case Browser_TLSFingerprint_Extensions.SUPPORTED_EKT_CIPHERS:
      return "SUPPORTED_EKT_CIPHERS";
    case Browser_TLSFingerprint_Extensions.PRE_SHARED_KEY:
      return "PRE_SHARED_KEY";
    case Browser_TLSFingerprint_Extensions.EARLY_DATA:
      return "EARLY_DATA";
    case Browser_TLSFingerprint_Extensions.SUPPORTED_VERSIONS:
      return "SUPPORTED_VERSIONS";
    case Browser_TLSFingerprint_Extensions.COOKIE:
      return "COOKIE";
    case Browser_TLSFingerprint_Extensions.PSK_KEY_EXCHANGE_MODES:
      return "PSK_KEY_EXCHANGE_MODES";
    case Browser_TLSFingerprint_Extensions.CERTIFICATE_AUTHORITIES:
      return "CERTIFICATE_AUTHORITIES";
    case Browser_TLSFingerprint_Extensions.OID_FILTERS:
      return "OID_FILTERS";
    case Browser_TLSFingerprint_Extensions.POST_HANDSHAKE_AUTH:
      return "POST_HANDSHAKE_AUTH";
    case Browser_TLSFingerprint_Extensions.SIGNATURE_ALGORITHMS_CERT:
      return "SIGNATURE_ALGORITHMS_CERT";
    case Browser_TLSFingerprint_Extensions.KEY_SHARE:
      return "KEY_SHARE";
    case Browser_TLSFingerprint_Extensions.TRANSPARENCY_INFO:
      return "TRANSPARENCY_INFO";
    case Browser_TLSFingerprint_Extensions.CONNECTION_ID_DEPRECATED:
      return "CONNECTION_ID_DEPRECATED";
    case Browser_TLSFingerprint_Extensions.CONNECTION_ID:
      return "CONNECTION_ID";
    case Browser_TLSFingerprint_Extensions.EXTERNAL_ID_HASH:
      return "EXTERNAL_ID_HASH";
    case Browser_TLSFingerprint_Extensions.EXTERNAL_SESSION_ID:
      return "EXTERNAL_SESSION_ID";
    case Browser_TLSFingerprint_Extensions.QUIC_TRANSPORT_PARAMETERS:
      return "QUIC_TRANSPORT_PARAMETERS";
    case Browser_TLSFingerprint_Extensions.TICKET_REQUEST:
      return "TICKET_REQUEST";
    case Browser_TLSFingerprint_Extensions.DNSSEC_CHAIN:
      return "DNSSEC_CHAIN";
    case Browser_TLSFingerprint_Extensions.SEQUENCE_NUMBER_ENCRYPTION_ALGORITHMS:
      return "SEQUENCE_NUMBER_ENCRYPTION_ALGORITHMS";
    case Browser_TLSFingerprint_Extensions.EXTENSION_APPLICATIONS_SETTINGS:
      return "EXTENSION_APPLICATIONS_SETTINGS";
    case Browser_TLSFingerprint_Extensions.EXTENSION_RENEGOTIATION_INFO:
      return "EXTENSION_RENEGOTIATION_INFO";
    case Browser_TLSFingerprint_Extensions.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** - Elliptic curves: https://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml#tls-parameters-8 */
export enum Browser_TLSFingerprint_EllipticCurve {
  RESERVED = 0,
  SECT163K1 = 1,
  SECT163R1 = 2,
  SECT163R2 = 3,
  SECT193R1 = 4,
  SECT193R2 = 5,
  SECT233K1 = 6,
  SECT233R1 = 7,
  SECT239K1 = 8,
  SECT283K1 = 9,
  SECT283R1 = 10,
  SECT409K1 = 11,
  SECT409R1 = 12,
  SECT571K1 = 13,
  SECT571R1 = 14,
  SECP160K1 = 15,
  SECP160R1 = 16,
  SECP160R2 = 17,
  SECP192K1 = 18,
  SECP192R1 = 19,
  SECP224K1 = 20,
  SECP224R1 = 21,
  SECP256K1 = 22,
  SECP256R1 = 23,
  SECP384R1 = 24,
  SECP521R1 = 25,
  BRAINPOOLP256R1 = 26,
  BRAINPOOLP384R1 = 27,
  BRAINPOOLP512R1 = 28,
  X25519 = 29,
  X448 = 30,
  BRAINPOOLP256R1TLS13 = 31,
  BRAINPOOLP384R1TLS13 = 32,
  BRAINPOOLP512R1TLS13 = 33,
  GC256A = 34,
  GC256B = 35,
  GC256C = 36,
  GC256D = 37,
  GC512A = 38,
  GC512B = 39,
  GC512C = 40,
  CURVESM2 = 41,
  FFDHE2048 = 256,
  FFDHE3072 = 257,
  FFDHE4096 = 258,
  FFDHE6144 = 259,
  FFDHE8192 = 260,
  ARBITRARY_EXPLICIT_PRIME_CURVES = 65281,
  ARBITRARY_EXPLICIT_CHAR2_CURVES = 65282,
  UNRECOGNIZED = -1,
}

export function browser_TLSFingerprint_EllipticCurveFromJSON(object: any): Browser_TLSFingerprint_EllipticCurve {
  switch (object) {
    case 0:
    case "RESERVED":
      return Browser_TLSFingerprint_EllipticCurve.RESERVED;
    case 1:
    case "SECT163K1":
      return Browser_TLSFingerprint_EllipticCurve.SECT163K1;
    case 2:
    case "SECT163R1":
      return Browser_TLSFingerprint_EllipticCurve.SECT163R1;
    case 3:
    case "SECT163R2":
      return Browser_TLSFingerprint_EllipticCurve.SECT163R2;
    case 4:
    case "SECT193R1":
      return Browser_TLSFingerprint_EllipticCurve.SECT193R1;
    case 5:
    case "SECT193R2":
      return Browser_TLSFingerprint_EllipticCurve.SECT193R2;
    case 6:
    case "SECT233K1":
      return Browser_TLSFingerprint_EllipticCurve.SECT233K1;
    case 7:
    case "SECT233R1":
      return Browser_TLSFingerprint_EllipticCurve.SECT233R1;
    case 8:
    case "SECT239K1":
      return Browser_TLSFingerprint_EllipticCurve.SECT239K1;
    case 9:
    case "SECT283K1":
      return Browser_TLSFingerprint_EllipticCurve.SECT283K1;
    case 10:
    case "SECT283R1":
      return Browser_TLSFingerprint_EllipticCurve.SECT283R1;
    case 11:
    case "SECT409K1":
      return Browser_TLSFingerprint_EllipticCurve.SECT409K1;
    case 12:
    case "SECT409R1":
      return Browser_TLSFingerprint_EllipticCurve.SECT409R1;
    case 13:
    case "SECT571K1":
      return Browser_TLSFingerprint_EllipticCurve.SECT571K1;
    case 14:
    case "SECT571R1":
      return Browser_TLSFingerprint_EllipticCurve.SECT571R1;
    case 15:
    case "SECP160K1":
      return Browser_TLSFingerprint_EllipticCurve.SECP160K1;
    case 16:
    case "SECP160R1":
      return Browser_TLSFingerprint_EllipticCurve.SECP160R1;
    case 17:
    case "SECP160R2":
      return Browser_TLSFingerprint_EllipticCurve.SECP160R2;
    case 18:
    case "SECP192K1":
      return Browser_TLSFingerprint_EllipticCurve.SECP192K1;
    case 19:
    case "SECP192R1":
      return Browser_TLSFingerprint_EllipticCurve.SECP192R1;
    case 20:
    case "SECP224K1":
      return Browser_TLSFingerprint_EllipticCurve.SECP224K1;
    case 21:
    case "SECP224R1":
      return Browser_TLSFingerprint_EllipticCurve.SECP224R1;
    case 22:
    case "SECP256K1":
      return Browser_TLSFingerprint_EllipticCurve.SECP256K1;
    case 23:
    case "SECP256R1":
      return Browser_TLSFingerprint_EllipticCurve.SECP256R1;
    case 24:
    case "SECP384R1":
      return Browser_TLSFingerprint_EllipticCurve.SECP384R1;
    case 25:
    case "SECP521R1":
      return Browser_TLSFingerprint_EllipticCurve.SECP521R1;
    case 26:
    case "BRAINPOOLP256R1":
      return Browser_TLSFingerprint_EllipticCurve.BRAINPOOLP256R1;
    case 27:
    case "BRAINPOOLP384R1":
      return Browser_TLSFingerprint_EllipticCurve.BRAINPOOLP384R1;
    case 28:
    case "BRAINPOOLP512R1":
      return Browser_TLSFingerprint_EllipticCurve.BRAINPOOLP512R1;
    case 29:
    case "X25519":
      return Browser_TLSFingerprint_EllipticCurve.X25519;
    case 30:
    case "X448":
      return Browser_TLSFingerprint_EllipticCurve.X448;
    case 31:
    case "BRAINPOOLP256R1TLS13":
      return Browser_TLSFingerprint_EllipticCurve.BRAINPOOLP256R1TLS13;
    case 32:
    case "BRAINPOOLP384R1TLS13":
      return Browser_TLSFingerprint_EllipticCurve.BRAINPOOLP384R1TLS13;
    case 33:
    case "BRAINPOOLP512R1TLS13":
      return Browser_TLSFingerprint_EllipticCurve.BRAINPOOLP512R1TLS13;
    case 34:
    case "GC256A":
      return Browser_TLSFingerprint_EllipticCurve.GC256A;
    case 35:
    case "GC256B":
      return Browser_TLSFingerprint_EllipticCurve.GC256B;
    case 36:
    case "GC256C":
      return Browser_TLSFingerprint_EllipticCurve.GC256C;
    case 37:
    case "GC256D":
      return Browser_TLSFingerprint_EllipticCurve.GC256D;
    case 38:
    case "GC512A":
      return Browser_TLSFingerprint_EllipticCurve.GC512A;
    case 39:
    case "GC512B":
      return Browser_TLSFingerprint_EllipticCurve.GC512B;
    case 40:
    case "GC512C":
      return Browser_TLSFingerprint_EllipticCurve.GC512C;
    case 41:
    case "CURVESM2":
      return Browser_TLSFingerprint_EllipticCurve.CURVESM2;
    case 256:
    case "FFDHE2048":
      return Browser_TLSFingerprint_EllipticCurve.FFDHE2048;
    case 257:
    case "FFDHE3072":
      return Browser_TLSFingerprint_EllipticCurve.FFDHE3072;
    case 258:
    case "FFDHE4096":
      return Browser_TLSFingerprint_EllipticCurve.FFDHE4096;
    case 259:
    case "FFDHE6144":
      return Browser_TLSFingerprint_EllipticCurve.FFDHE6144;
    case 260:
    case "FFDHE8192":
      return Browser_TLSFingerprint_EllipticCurve.FFDHE8192;
    case 65281:
    case "ARBITRARY_EXPLICIT_PRIME_CURVES":
      return Browser_TLSFingerprint_EllipticCurve.ARBITRARY_EXPLICIT_PRIME_CURVES;
    case 65282:
    case "ARBITRARY_EXPLICIT_CHAR2_CURVES":
      return Browser_TLSFingerprint_EllipticCurve.ARBITRARY_EXPLICIT_CHAR2_CURVES;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Browser_TLSFingerprint_EllipticCurve.UNRECOGNIZED;
  }
}

export function browser_TLSFingerprint_EllipticCurveToJSON(object: Browser_TLSFingerprint_EllipticCurve): string {
  switch (object) {
    case Browser_TLSFingerprint_EllipticCurve.RESERVED:
      return "RESERVED";
    case Browser_TLSFingerprint_EllipticCurve.SECT163K1:
      return "SECT163K1";
    case Browser_TLSFingerprint_EllipticCurve.SECT163R1:
      return "SECT163R1";
    case Browser_TLSFingerprint_EllipticCurve.SECT163R2:
      return "SECT163R2";
    case Browser_TLSFingerprint_EllipticCurve.SECT193R1:
      return "SECT193R1";
    case Browser_TLSFingerprint_EllipticCurve.SECT193R2:
      return "SECT193R2";
    case Browser_TLSFingerprint_EllipticCurve.SECT233K1:
      return "SECT233K1";
    case Browser_TLSFingerprint_EllipticCurve.SECT233R1:
      return "SECT233R1";
    case Browser_TLSFingerprint_EllipticCurve.SECT239K1:
      return "SECT239K1";
    case Browser_TLSFingerprint_EllipticCurve.SECT283K1:
      return "SECT283K1";
    case Browser_TLSFingerprint_EllipticCurve.SECT283R1:
      return "SECT283R1";
    case Browser_TLSFingerprint_EllipticCurve.SECT409K1:
      return "SECT409K1";
    case Browser_TLSFingerprint_EllipticCurve.SECT409R1:
      return "SECT409R1";
    case Browser_TLSFingerprint_EllipticCurve.SECT571K1:
      return "SECT571K1";
    case Browser_TLSFingerprint_EllipticCurve.SECT571R1:
      return "SECT571R1";
    case Browser_TLSFingerprint_EllipticCurve.SECP160K1:
      return "SECP160K1";
    case Browser_TLSFingerprint_EllipticCurve.SECP160R1:
      return "SECP160R1";
    case Browser_TLSFingerprint_EllipticCurve.SECP160R2:
      return "SECP160R2";
    case Browser_TLSFingerprint_EllipticCurve.SECP192K1:
      return "SECP192K1";
    case Browser_TLSFingerprint_EllipticCurve.SECP192R1:
      return "SECP192R1";
    case Browser_TLSFingerprint_EllipticCurve.SECP224K1:
      return "SECP224K1";
    case Browser_TLSFingerprint_EllipticCurve.SECP224R1:
      return "SECP224R1";
    case Browser_TLSFingerprint_EllipticCurve.SECP256K1:
      return "SECP256K1";
    case Browser_TLSFingerprint_EllipticCurve.SECP256R1:
      return "SECP256R1";
    case Browser_TLSFingerprint_EllipticCurve.SECP384R1:
      return "SECP384R1";
    case Browser_TLSFingerprint_EllipticCurve.SECP521R1:
      return "SECP521R1";
    case Browser_TLSFingerprint_EllipticCurve.BRAINPOOLP256R1:
      return "BRAINPOOLP256R1";
    case Browser_TLSFingerprint_EllipticCurve.BRAINPOOLP384R1:
      return "BRAINPOOLP384R1";
    case Browser_TLSFingerprint_EllipticCurve.BRAINPOOLP512R1:
      return "BRAINPOOLP512R1";
    case Browser_TLSFingerprint_EllipticCurve.X25519:
      return "X25519";
    case Browser_TLSFingerprint_EllipticCurve.X448:
      return "X448";
    case Browser_TLSFingerprint_EllipticCurve.BRAINPOOLP256R1TLS13:
      return "BRAINPOOLP256R1TLS13";
    case Browser_TLSFingerprint_EllipticCurve.BRAINPOOLP384R1TLS13:
      return "BRAINPOOLP384R1TLS13";
    case Browser_TLSFingerprint_EllipticCurve.BRAINPOOLP512R1TLS13:
      return "BRAINPOOLP512R1TLS13";
    case Browser_TLSFingerprint_EllipticCurve.GC256A:
      return "GC256A";
    case Browser_TLSFingerprint_EllipticCurve.GC256B:
      return "GC256B";
    case Browser_TLSFingerprint_EllipticCurve.GC256C:
      return "GC256C";
    case Browser_TLSFingerprint_EllipticCurve.GC256D:
      return "GC256D";
    case Browser_TLSFingerprint_EllipticCurve.GC512A:
      return "GC512A";
    case Browser_TLSFingerprint_EllipticCurve.GC512B:
      return "GC512B";
    case Browser_TLSFingerprint_EllipticCurve.GC512C:
      return "GC512C";
    case Browser_TLSFingerprint_EllipticCurve.CURVESM2:
      return "CURVESM2";
    case Browser_TLSFingerprint_EllipticCurve.FFDHE2048:
      return "FFDHE2048";
    case Browser_TLSFingerprint_EllipticCurve.FFDHE3072:
      return "FFDHE3072";
    case Browser_TLSFingerprint_EllipticCurve.FFDHE4096:
      return "FFDHE4096";
    case Browser_TLSFingerprint_EllipticCurve.FFDHE6144:
      return "FFDHE6144";
    case Browser_TLSFingerprint_EllipticCurve.FFDHE8192:
      return "FFDHE8192";
    case Browser_TLSFingerprint_EllipticCurve.ARBITRARY_EXPLICIT_PRIME_CURVES:
      return "ARBITRARY_EXPLICIT_PRIME_CURVES";
    case Browser_TLSFingerprint_EllipticCurve.ARBITRARY_EXPLICIT_CHAR2_CURVES:
      return "ARBITRARY_EXPLICIT_CHAR2_CURVES";
    case Browser_TLSFingerprint_EllipticCurve.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** https://www.rfc-editor.org/rfc/rfc4492#section-5.1.2 */
export enum Browser_TLSFingerprint_EllipticCurvePointFormat {
  UNCOMPRESSED = 0,
  ANSI_X962_COMPRESSED_PRIME = 1,
  ANSI_X962_COMPRESSED_CHAR2 = 2,
  UNRECOGNIZED = -1,
}

export function browser_TLSFingerprint_EllipticCurvePointFormatFromJSON(
  object: any,
): Browser_TLSFingerprint_EllipticCurvePointFormat {
  switch (object) {
    case 0:
    case "UNCOMPRESSED":
      return Browser_TLSFingerprint_EllipticCurvePointFormat.UNCOMPRESSED;
    case 1:
    case "ANSI_X962_COMPRESSED_PRIME":
      return Browser_TLSFingerprint_EllipticCurvePointFormat.ANSI_X962_COMPRESSED_PRIME;
    case 2:
    case "ANSI_X962_COMPRESSED_CHAR2":
      return Browser_TLSFingerprint_EllipticCurvePointFormat.ANSI_X962_COMPRESSED_CHAR2;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Browser_TLSFingerprint_EllipticCurvePointFormat.UNRECOGNIZED;
  }
}

export function browser_TLSFingerprint_EllipticCurvePointFormatToJSON(
  object: Browser_TLSFingerprint_EllipticCurvePointFormat,
): string {
  switch (object) {
    case Browser_TLSFingerprint_EllipticCurvePointFormat.UNCOMPRESSED:
      return "UNCOMPRESSED";
    case Browser_TLSFingerprint_EllipticCurvePointFormat.ANSI_X962_COMPRESSED_PRIME:
      return "ANSI_X962_COMPRESSED_PRIME";
    case Browser_TLSFingerprint_EllipticCurvePointFormat.ANSI_X962_COMPRESSED_CHAR2:
      return "ANSI_X962_COMPRESSED_CHAR2";
    case Browser_TLSFingerprint_EllipticCurvePointFormat.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Potentially common for more than just Android */
export interface GPSLocation {
  longitude: number;
  latitude: number;
  altitude: number;
  provider: GPSLocation_LocationProvider;
}

export enum GPSLocation_LocationProvider {
  /** LocationProvider_NONE - Treat as random */
  LocationProvider_NONE = 0,
  GPS = 1,
  NETWORK = 2,
  PASSIVE = 3,
  UNRECOGNIZED = -1,
}

export function gPSLocation_LocationProviderFromJSON(object: any): GPSLocation_LocationProvider {
  switch (object) {
    case 0:
    case "LocationProvider_NONE":
      return GPSLocation_LocationProvider.LocationProvider_NONE;
    case 1:
    case "GPS":
      return GPSLocation_LocationProvider.GPS;
    case 2:
    case "NETWORK":
      return GPSLocation_LocationProvider.NETWORK;
    case 3:
    case "PASSIVE":
      return GPSLocation_LocationProvider.PASSIVE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return GPSLocation_LocationProvider.UNRECOGNIZED;
  }
}

export function gPSLocation_LocationProviderToJSON(object: GPSLocation_LocationProvider): string {
  switch (object) {
    case GPSLocation_LocationProvider.LocationProvider_NONE:
      return "LocationProvider_NONE";
    case GPSLocation_LocationProvider.GPS:
      return "GPS";
    case GPSLocation_LocationProvider.NETWORK:
      return "NETWORK";
    case GPSLocation_LocationProvider.PASSIVE:
      return "PASSIVE";
    case GPSLocation_LocationProvider.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Locale {
  language: string;
  countryISO: string;
}

export interface SIMCard {
  /** With or without country code? */
  phoneNumber: string;
  /** Provider and country information */
  MCC: string;
  MNC: string;
  carrier: string;
  countryISO: string;
  countryCode: string;
  imei: SIMCard_IMEI | undefined;
  meid: SIMCard_MEID | undefined;
}

export interface SIMCard_IMEI {
  TAC: string;
  /**
   * src: https://en.wikipedia.org/wiki/International_Mobile_Equipment_Identity
   * AA	-	BB	BB	BB	-	CC	CC	CC	D
   * Where AA and BB = TAC, CC = serial (randomized) and D = Luhn validation
   */
  imei: string;
}

export interface SIMCard_MEID {
  RegionCode: string;
  ManufacturerCode: string;
  /**
   * src: https://en.wikipedia.org/wiki/Mobile_equipment_identifier
   * R R	X	X	X	X	X	X	Z	Z	Z	Z	Z	Z	C
   * Where R = region, X = manufacturer, Z = serial (randomized) and C = Luhn validation
   */
  meid: string;
}

export interface MAC {
  OUI: string;
  address: string;
}

export interface Timezone {
  /** IANA standard */
  name: string;
}

export interface ScreenData {
  /** in DPI */
  density: number;
  /** in pixels */
  resolutionHorizontal: number;
  /** in pixels */
  resolutionVertical: number;
}

export interface CPUData {
  arch: CPUData_Architecture;
  archName: string;
  model: string;
  brand: string;
  board: string;
  abiList: string[];
}

export enum CPUData_Architecture {
  UNKNOWN = 0,
  ARM = 1,
  ARM64 = 2,
  MIPS = 3,
  MIPSEL = 4,
  PPC = 5,
  PPC64 = 6,
  X32 = 7,
  X64 = 8,
  UNRECOGNIZED = -1,
}

export function cPUData_ArchitectureFromJSON(object: any): CPUData_Architecture {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return CPUData_Architecture.UNKNOWN;
    case 1:
    case "ARM":
      return CPUData_Architecture.ARM;
    case 2:
    case "ARM64":
      return CPUData_Architecture.ARM64;
    case 3:
    case "MIPS":
      return CPUData_Architecture.MIPS;
    case 4:
    case "MIPSEL":
      return CPUData_Architecture.MIPSEL;
    case 5:
    case "PPC":
      return CPUData_Architecture.PPC;
    case 6:
    case "PPC64":
      return CPUData_Architecture.PPC64;
    case 7:
    case "X32":
      return CPUData_Architecture.X32;
    case 8:
    case "X64":
      return CPUData_Architecture.X64;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CPUData_Architecture.UNRECOGNIZED;
  }
}

export function cPUData_ArchitectureToJSON(object: CPUData_Architecture): string {
  switch (object) {
    case CPUData_Architecture.UNKNOWN:
      return "UNKNOWN";
    case CPUData_Architecture.ARM:
      return "ARM";
    case CPUData_Architecture.ARM64:
      return "ARM64";
    case CPUData_Architecture.MIPS:
      return "MIPS";
    case CPUData_Architecture.MIPSEL:
      return "MIPSEL";
    case CPUData_Architecture.PPC:
      return "PPC";
    case CPUData_Architecture.PPC64:
      return "PPC64";
    case CPUData_Architecture.X32:
      return "X32";
    case CPUData_Architecture.X64:
      return "X64";
    case CPUData_Architecture.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Android device */
export interface AndroidDevice {
  id: AndroidDevice_ID | undefined;
  version: AndroidDevice_Version;
  build: AndroidDevice_BuildData | undefined;
  software:
    | AndroidDevice_DeviceSoftware
    | undefined;
  /** Everything below this can technically be abstracted to unified device */
  screen: ScreenData | undefined;
  cpu: CPUData | undefined;
  locale: Locale | undefined;
  location: GPSLocation | undefined;
  timezone: Timezone | undefined;
  macAddress:
    | MAC
    | undefined;
  /** Dual SIM compatibility */
  simSlots: SIMCard[];
}

/**
 * Src: https://apilevels.com/
 * BuildNumber defaults: https://source.android.com/docs/setup/about/build-numbers#source-code-tags-and-builds
 */
export enum AndroidDevice_Version {
  AndroidVersion_NONE = 0,
  /** V1_0 - BASE */
  V1_0 = 1,
  /** V1_1 - BASE_1_1 */
  V1_1 = 2,
  /** V1_5 - CUPCAKE */
  V1_5 = 3,
  /** V1_6 - DONUT */
  V1_6 = 4,
  /** V2 - ECLAIR */
  V2 = 5,
  /** V2_0_1 - ECLAIR_0_1 */
  V2_0_1 = 6,
  /** V2_1 - ECLAIR_MR1 */
  V2_1 = 7,
  /** V2_2 - FROYO */
  V2_2 = 8,
  /** V2_3_2 - GINGERBREAD */
  V2_3_2 = 9,
  /** V2_3_7 - GINGERBREAD_MR1 */
  V2_3_7 = 10,
  /** V3_0 - HONEYCOMB */
  V3_0 = 11,
  /** v3_1 - HONEYCOMB_MR1 */
  v3_1 = 12,
  /** V3_2 - HONEYCOMB_MR2 */
  V3_2 = 13,
  /** V4_0_2 - ICE_CREAM_SANDWICH */
  V4_0_2 = 14,
  /** V4_0_4 - ICE_CREAM_SANDWICH_MR1 */
  V4_0_4 = 15,
  /** V4_1 - JELLY_BEAN */
  V4_1 = 16,
  /** V4_2 - JELLY_BEAN_MR1 */
  V4_2 = 17,
  /** V4_3 - JELLY_BEAN_MR2 */
  V4_3 = 18,
  /** V4_4 - KITKAT */
  V4_4 = 19,
  /** V4_4W - KITKAT_WATCH */
  V4_4W = 20,
  /** V5_0 - LOLLIPOP / L */
  V5_0 = 21,
  /** V5_1 - LOLLIPOP_MR1 */
  V5_1 = 22,
  /** V6_0 - M */
  V6_0 = 23,
  /** V7_0 - N */
  V7_0 = 24,
  /** V7_1 - N_MR1 */
  V7_1 = 25,
  /** V8_0 - O */
  V8_0 = 26,
  /** V8_1 - O_MR1 */
  V8_1 = 27,
  /** V9_0 - P */
  V9_0 = 28,
  /** V10_0 - Q */
  V10_0 = 29,
  /** V11_0 - R */
  V11_0 = 30,
  /** V12_0 - S */
  V12_0 = 31,
  /** V12_0L - S_V2 */
  V12_0L = 32,
  /** V13_0 - TIRAMISU */
  V13_0 = 33,
  /** V14_0 - UPSIDE_DOWN_CAKE */
  V14_0 = 34,
  UNRECOGNIZED = -1,
}

export function androidDevice_VersionFromJSON(object: any): AndroidDevice_Version {
  switch (object) {
    case 0:
    case "AndroidVersion_NONE":
      return AndroidDevice_Version.AndroidVersion_NONE;
    case 1:
    case "V1_0":
      return AndroidDevice_Version.V1_0;
    case 2:
    case "V1_1":
      return AndroidDevice_Version.V1_1;
    case 3:
    case "V1_5":
      return AndroidDevice_Version.V1_5;
    case 4:
    case "V1_6":
      return AndroidDevice_Version.V1_6;
    case 5:
    case "V2":
      return AndroidDevice_Version.V2;
    case 6:
    case "V2_0_1":
      return AndroidDevice_Version.V2_0_1;
    case 7:
    case "V2_1":
      return AndroidDevice_Version.V2_1;
    case 8:
    case "V2_2":
      return AndroidDevice_Version.V2_2;
    case 9:
    case "V2_3_2":
      return AndroidDevice_Version.V2_3_2;
    case 10:
    case "V2_3_7":
      return AndroidDevice_Version.V2_3_7;
    case 11:
    case "V3_0":
      return AndroidDevice_Version.V3_0;
    case 12:
    case "v3_1":
      return AndroidDevice_Version.v3_1;
    case 13:
    case "V3_2":
      return AndroidDevice_Version.V3_2;
    case 14:
    case "V4_0_2":
      return AndroidDevice_Version.V4_0_2;
    case 15:
    case "V4_0_4":
      return AndroidDevice_Version.V4_0_4;
    case 16:
    case "V4_1":
      return AndroidDevice_Version.V4_1;
    case 17:
    case "V4_2":
      return AndroidDevice_Version.V4_2;
    case 18:
    case "V4_3":
      return AndroidDevice_Version.V4_3;
    case 19:
    case "V4_4":
      return AndroidDevice_Version.V4_4;
    case 20:
    case "V4_4W":
      return AndroidDevice_Version.V4_4W;
    case 21:
    case "V5_0":
      return AndroidDevice_Version.V5_0;
    case 22:
    case "V5_1":
      return AndroidDevice_Version.V5_1;
    case 23:
    case "V6_0":
      return AndroidDevice_Version.V6_0;
    case 24:
    case "V7_0":
      return AndroidDevice_Version.V7_0;
    case 25:
    case "V7_1":
      return AndroidDevice_Version.V7_1;
    case 26:
    case "V8_0":
      return AndroidDevice_Version.V8_0;
    case 27:
    case "V8_1":
      return AndroidDevice_Version.V8_1;
    case 28:
    case "V9_0":
      return AndroidDevice_Version.V9_0;
    case 29:
    case "V10_0":
      return AndroidDevice_Version.V10_0;
    case 30:
    case "V11_0":
      return AndroidDevice_Version.V11_0;
    case 31:
    case "V12_0":
      return AndroidDevice_Version.V12_0;
    case 32:
    case "V12_0L":
      return AndroidDevice_Version.V12_0L;
    case 33:
    case "V13_0":
      return AndroidDevice_Version.V13_0;
    case 34:
    case "V14_0":
      return AndroidDevice_Version.V14_0;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AndroidDevice_Version.UNRECOGNIZED;
  }
}

export function androidDevice_VersionToJSON(object: AndroidDevice_Version): string {
  switch (object) {
    case AndroidDevice_Version.AndroidVersion_NONE:
      return "AndroidVersion_NONE";
    case AndroidDevice_Version.V1_0:
      return "V1_0";
    case AndroidDevice_Version.V1_1:
      return "V1_1";
    case AndroidDevice_Version.V1_5:
      return "V1_5";
    case AndroidDevice_Version.V1_6:
      return "V1_6";
    case AndroidDevice_Version.V2:
      return "V2";
    case AndroidDevice_Version.V2_0_1:
      return "V2_0_1";
    case AndroidDevice_Version.V2_1:
      return "V2_1";
    case AndroidDevice_Version.V2_2:
      return "V2_2";
    case AndroidDevice_Version.V2_3_2:
      return "V2_3_2";
    case AndroidDevice_Version.V2_3_7:
      return "V2_3_7";
    case AndroidDevice_Version.V3_0:
      return "V3_0";
    case AndroidDevice_Version.v3_1:
      return "v3_1";
    case AndroidDevice_Version.V3_2:
      return "V3_2";
    case AndroidDevice_Version.V4_0_2:
      return "V4_0_2";
    case AndroidDevice_Version.V4_0_4:
      return "V4_0_4";
    case AndroidDevice_Version.V4_1:
      return "V4_1";
    case AndroidDevice_Version.V4_2:
      return "V4_2";
    case AndroidDevice_Version.V4_3:
      return "V4_3";
    case AndroidDevice_Version.V4_4:
      return "V4_4";
    case AndroidDevice_Version.V4_4W:
      return "V4_4W";
    case AndroidDevice_Version.V5_0:
      return "V5_0";
    case AndroidDevice_Version.V5_1:
      return "V5_1";
    case AndroidDevice_Version.V6_0:
      return "V6_0";
    case AndroidDevice_Version.V7_0:
      return "V7_0";
    case AndroidDevice_Version.V7_1:
      return "V7_1";
    case AndroidDevice_Version.V8_0:
      return "V8_0";
    case AndroidDevice_Version.V8_1:
      return "V8_1";
    case AndroidDevice_Version.V9_0:
      return "V9_0";
    case AndroidDevice_Version.V10_0:
      return "V10_0";
    case AndroidDevice_Version.V11_0:
      return "V11_0";
    case AndroidDevice_Version.V12_0:
      return "V12_0";
    case AndroidDevice_Version.V12_0L:
      return "V12_0L";
    case AndroidDevice_Version.V13_0:
      return "V13_0";
    case AndroidDevice_Version.V14_0:
      return "V14_0";
    case AndroidDevice_Version.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface AndroidDevice_ID {
  id: number;
}

/** https://developer.android.com/reference/android/os/Build */
export interface AndroidDevice_BuildData {
  board: string;
  bootloader: string;
  brand: string;
  device: string;
  display: string;
  fingerprint: string;
  hardware: string;
  id: string;
  manufacturer: string;
  model: string;
  odmSku: string;
  product: string;
  sku: string;
  socManufacturer: string;
  socModel: string;
  tags: string;
  type: string;
  incrementalVersion: string;
}

export interface AndroidDevice_DeviceSoftware {
  softwareMetaData: { [key: string]: string };
  /** app package : version string */
  appMetaData: { [key: string]: string };
}

export interface AndroidDevice_DeviceSoftware_SoftwareMetaDataEntry {
  key: string;
  value: string;
}

export interface AndroidDevice_DeviceSoftware_AppMetaDataEntry {
  key: string;
  value: string;
}

function createBaseBrowser(): Browser {
  return { version: "", name: "", userAgent: "", brandHeader: "", tlsFingerprint: undefined };
}

export const Browser = {
  encode(message: Browser, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.version !== "") {
      writer.uint32(10).string(message.version);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.userAgent !== "") {
      writer.uint32(26).string(message.userAgent);
    }
    if (message.brandHeader !== "") {
      writer.uint32(34).string(message.brandHeader);
    }
    if (message.tlsFingerprint !== undefined) {
      Browser_TLSFingerprint.encode(message.tlsFingerprint, writer.uint32(42).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Browser {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBrowser();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.version = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.name = reader.string();
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.userAgent = reader.string();
          continue;
        case 4:
          if (tag != 34) {
            break;
          }

          message.brandHeader = reader.string();
          continue;
        case 5:
          if (tag != 42) {
            break;
          }

          message.tlsFingerprint = Browser_TLSFingerprint.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Browser {
    return {
      version: isSet(object.version) ? String(object.version) : "",
      name: isSet(object.name) ? String(object.name) : "",
      userAgent: isSet(object.userAgent) ? String(object.userAgent) : "",
      brandHeader: isSet(object.brandHeader) ? String(object.brandHeader) : "",
      tlsFingerprint: isSet(object.tlsFingerprint) ? Browser_TLSFingerprint.fromJSON(object.tlsFingerprint) : undefined,
    };
  },

  toJSON(message: Browser): unknown {
    const obj: any = {};
    message.version !== undefined && (obj.version = message.version);
    message.name !== undefined && (obj.name = message.name);
    message.userAgent !== undefined && (obj.userAgent = message.userAgent);
    message.brandHeader !== undefined && (obj.brandHeader = message.brandHeader);
    message.tlsFingerprint !== undefined &&
      (obj.tlsFingerprint = message.tlsFingerprint ? Browser_TLSFingerprint.toJSON(message.tlsFingerprint) : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<Browser>, I>>(base?: I): Browser {
    return Browser.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<Browser>, I>>(object: I): Browser {
    const message = createBaseBrowser();
    message.version = object.version ?? "";
    message.name = object.name ?? "";
    message.userAgent = object.userAgent ?? "";
    message.brandHeader = object.brandHeader ?? "";
    message.tlsFingerprint = (object.tlsFingerprint !== undefined && object.tlsFingerprint !== null)
      ? Browser_TLSFingerprint.fromPartial(object.tlsFingerprint)
      : undefined;
    return message;
  },
};

function createBaseBrowser_TLSFingerprint(): Browser_TLSFingerprint {
  return { version: 0, cipherSuites: [], extensions: [], ellipticCurves: [], ellipticCurvePointFormats: [] };
}

export const Browser_TLSFingerprint = {
  encode(message: Browser_TLSFingerprint, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.version !== 0) {
      writer.uint32(8).int32(message.version);
    }
    writer.uint32(18).fork();
    for (const v of message.cipherSuites) {
      writer.int32(v);
    }
    writer.ldelim();
    writer.uint32(26).fork();
    for (const v of message.extensions) {
      writer.int32(v);
    }
    writer.ldelim();
    writer.uint32(34).fork();
    for (const v of message.ellipticCurves) {
      writer.int32(v);
    }
    writer.ldelim();
    writer.uint32(42).fork();
    for (const v of message.ellipticCurvePointFormats) {
      writer.int32(v);
    }
    writer.ldelim();
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Browser_TLSFingerprint {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBrowser_TLSFingerprint();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.version = reader.int32() as any;
          continue;
        case 2:
          if (tag == 16) {
            message.cipherSuites.push(reader.int32() as any);
            continue;
          }

          if (tag == 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.cipherSuites.push(reader.int32() as any);
            }

            continue;
          }

          break;
        case 3:
          if (tag == 24) {
            message.extensions.push(reader.int32() as any);
            continue;
          }

          if (tag == 26) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.extensions.push(reader.int32() as any);
            }

            continue;
          }

          break;
        case 4:
          if (tag == 32) {
            message.ellipticCurves.push(reader.int32() as any);
            continue;
          }

          if (tag == 34) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.ellipticCurves.push(reader.int32() as any);
            }

            continue;
          }

          break;
        case 5:
          if (tag == 40) {
            message.ellipticCurvePointFormats.push(reader.int32() as any);
            continue;
          }

          if (tag == 42) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.ellipticCurvePointFormats.push(reader.int32() as any);
            }

            continue;
          }

          break;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Browser_TLSFingerprint {
    return {
      version: isSet(object.version) ? browser_TLSFingerprint_ProtocolVersionFromJSON(object.version) : 0,
      cipherSuites: Array.isArray(object?.cipherSuites)
        ? object.cipherSuites.map((e: any) => browser_TLSFingerprint_CipherSuiteFromJSON(e))
        : [],
      extensions: Array.isArray(object?.extensions)
        ? object.extensions.map((e: any) => browser_TLSFingerprint_ExtensionsFromJSON(e))
        : [],
      ellipticCurves: Array.isArray(object?.ellipticCurves)
        ? object.ellipticCurves.map((e: any) => browser_TLSFingerprint_EllipticCurveFromJSON(e))
        : [],
      ellipticCurvePointFormats: Array.isArray(object?.ellipticCurvePointFormats)
        ? object.ellipticCurvePointFormats.map((e: any) => browser_TLSFingerprint_EllipticCurvePointFormatFromJSON(e))
        : [],
    };
  },

  toJSON(message: Browser_TLSFingerprint): unknown {
    const obj: any = {};
    message.version !== undefined && (obj.version = browser_TLSFingerprint_ProtocolVersionToJSON(message.version));
    if (message.cipherSuites) {
      obj.cipherSuites = message.cipherSuites.map((e) => browser_TLSFingerprint_CipherSuiteToJSON(e));
    } else {
      obj.cipherSuites = [];
    }
    if (message.extensions) {
      obj.extensions = message.extensions.map((e) => browser_TLSFingerprint_ExtensionsToJSON(e));
    } else {
      obj.extensions = [];
    }
    if (message.ellipticCurves) {
      obj.ellipticCurves = message.ellipticCurves.map((e) => browser_TLSFingerprint_EllipticCurveToJSON(e));
    } else {
      obj.ellipticCurves = [];
    }
    if (message.ellipticCurvePointFormats) {
      obj.ellipticCurvePointFormats = message.ellipticCurvePointFormats.map((e) =>
        browser_TLSFingerprint_EllipticCurvePointFormatToJSON(e)
      );
    } else {
      obj.ellipticCurvePointFormats = [];
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Browser_TLSFingerprint>, I>>(base?: I): Browser_TLSFingerprint {
    return Browser_TLSFingerprint.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<Browser_TLSFingerprint>, I>>(object: I): Browser_TLSFingerprint {
    const message = createBaseBrowser_TLSFingerprint();
    message.version = object.version ?? 0;
    message.cipherSuites = object.cipherSuites?.map((e) => e) || [];
    message.extensions = object.extensions?.map((e) => e) || [];
    message.ellipticCurves = object.ellipticCurves?.map((e) => e) || [];
    message.ellipticCurvePointFormats = object.ellipticCurvePointFormats?.map((e) => e) || [];
    return message;
  },
};

function createBaseGPSLocation(): GPSLocation {
  return { longitude: 0, latitude: 0, altitude: 0, provider: 0 };
}

export const GPSLocation = {
  encode(message: GPSLocation, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.longitude !== 0) {
      writer.uint32(9).double(message.longitude);
    }
    if (message.latitude !== 0) {
      writer.uint32(17).double(message.latitude);
    }
    if (message.altitude !== 0) {
      writer.uint32(25).double(message.altitude);
    }
    if (message.provider !== 0) {
      writer.uint32(32).int32(message.provider);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GPSLocation {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGPSLocation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 9) {
            break;
          }

          message.longitude = reader.double();
          continue;
        case 2:
          if (tag != 17) {
            break;
          }

          message.latitude = reader.double();
          continue;
        case 3:
          if (tag != 25) {
            break;
          }

          message.altitude = reader.double();
          continue;
        case 4:
          if (tag != 32) {
            break;
          }

          message.provider = reader.int32() as any;
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GPSLocation {
    return {
      longitude: isSet(object.longitude) ? Number(object.longitude) : 0,
      latitude: isSet(object.latitude) ? Number(object.latitude) : 0,
      altitude: isSet(object.altitude) ? Number(object.altitude) : 0,
      provider: isSet(object.provider) ? gPSLocation_LocationProviderFromJSON(object.provider) : 0,
    };
  },

  toJSON(message: GPSLocation): unknown {
    const obj: any = {};
    message.longitude !== undefined && (obj.longitude = message.longitude);
    message.latitude !== undefined && (obj.latitude = message.latitude);
    message.altitude !== undefined && (obj.altitude = message.altitude);
    message.provider !== undefined && (obj.provider = gPSLocation_LocationProviderToJSON(message.provider));
    return obj;
  },

  create<I extends Exact<DeepPartial<GPSLocation>, I>>(base?: I): GPSLocation {
    return GPSLocation.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<GPSLocation>, I>>(object: I): GPSLocation {
    const message = createBaseGPSLocation();
    message.longitude = object.longitude ?? 0;
    message.latitude = object.latitude ?? 0;
    message.altitude = object.altitude ?? 0;
    message.provider = object.provider ?? 0;
    return message;
  },
};

function createBaseLocale(): Locale {
  return { language: "", countryISO: "" };
}

export const Locale = {
  encode(message: Locale, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    if (message.countryISO !== "") {
      writer.uint32(18).string(message.countryISO);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Locale {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLocale();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.language = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.countryISO = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Locale {
    return {
      language: isSet(object.language) ? String(object.language) : "",
      countryISO: isSet(object.countryISO) ? String(object.countryISO) : "",
    };
  },

  toJSON(message: Locale): unknown {
    const obj: any = {};
    message.language !== undefined && (obj.language = message.language);
    message.countryISO !== undefined && (obj.countryISO = message.countryISO);
    return obj;
  },

  create<I extends Exact<DeepPartial<Locale>, I>>(base?: I): Locale {
    return Locale.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<Locale>, I>>(object: I): Locale {
    const message = createBaseLocale();
    message.language = object.language ?? "";
    message.countryISO = object.countryISO ?? "";
    return message;
  },
};

function createBaseSIMCard(): SIMCard {
  return {
    phoneNumber: "",
    MCC: "",
    MNC: "",
    carrier: "",
    countryISO: "",
    countryCode: "",
    imei: undefined,
    meid: undefined,
  };
}

export const SIMCard = {
  encode(message: SIMCard, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.phoneNumber !== "") {
      writer.uint32(10).string(message.phoneNumber);
    }
    if (message.MCC !== "") {
      writer.uint32(18).string(message.MCC);
    }
    if (message.MNC !== "") {
      writer.uint32(26).string(message.MNC);
    }
    if (message.carrier !== "") {
      writer.uint32(34).string(message.carrier);
    }
    if (message.countryISO !== "") {
      writer.uint32(42).string(message.countryISO);
    }
    if (message.countryCode !== "") {
      writer.uint32(50).string(message.countryCode);
    }
    if (message.imei !== undefined) {
      SIMCard_IMEI.encode(message.imei, writer.uint32(58).fork()).ldelim();
    }
    if (message.meid !== undefined) {
      SIMCard_MEID.encode(message.meid, writer.uint32(66).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SIMCard {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSIMCard();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.phoneNumber = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.MCC = reader.string();
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.MNC = reader.string();
          continue;
        case 4:
          if (tag != 34) {
            break;
          }

          message.carrier = reader.string();
          continue;
        case 5:
          if (tag != 42) {
            break;
          }

          message.countryISO = reader.string();
          continue;
        case 6:
          if (tag != 50) {
            break;
          }

          message.countryCode = reader.string();
          continue;
        case 7:
          if (tag != 58) {
            break;
          }

          message.imei = SIMCard_IMEI.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag != 66) {
            break;
          }

          message.meid = SIMCard_MEID.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SIMCard {
    return {
      phoneNumber: isSet(object.phoneNumber) ? String(object.phoneNumber) : "",
      MCC: isSet(object.MCC) ? String(object.MCC) : "",
      MNC: isSet(object.MNC) ? String(object.MNC) : "",
      carrier: isSet(object.carrier) ? String(object.carrier) : "",
      countryISO: isSet(object.countryISO) ? String(object.countryISO) : "",
      countryCode: isSet(object.countryCode) ? String(object.countryCode) : "",
      imei: isSet(object.imei) ? SIMCard_IMEI.fromJSON(object.imei) : undefined,
      meid: isSet(object.meid) ? SIMCard_MEID.fromJSON(object.meid) : undefined,
    };
  },

  toJSON(message: SIMCard): unknown {
    const obj: any = {};
    message.phoneNumber !== undefined && (obj.phoneNumber = message.phoneNumber);
    message.MCC !== undefined && (obj.MCC = message.MCC);
    message.MNC !== undefined && (obj.MNC = message.MNC);
    message.carrier !== undefined && (obj.carrier = message.carrier);
    message.countryISO !== undefined && (obj.countryISO = message.countryISO);
    message.countryCode !== undefined && (obj.countryCode = message.countryCode);
    message.imei !== undefined && (obj.imei = message.imei ? SIMCard_IMEI.toJSON(message.imei) : undefined);
    message.meid !== undefined && (obj.meid = message.meid ? SIMCard_MEID.toJSON(message.meid) : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<SIMCard>, I>>(base?: I): SIMCard {
    return SIMCard.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<SIMCard>, I>>(object: I): SIMCard {
    const message = createBaseSIMCard();
    message.phoneNumber = object.phoneNumber ?? "";
    message.MCC = object.MCC ?? "";
    message.MNC = object.MNC ?? "";
    message.carrier = object.carrier ?? "";
    message.countryISO = object.countryISO ?? "";
    message.countryCode = object.countryCode ?? "";
    message.imei = (object.imei !== undefined && object.imei !== null)
      ? SIMCard_IMEI.fromPartial(object.imei)
      : undefined;
    message.meid = (object.meid !== undefined && object.meid !== null)
      ? SIMCard_MEID.fromPartial(object.meid)
      : undefined;
    return message;
  },
};

function createBaseSIMCard_IMEI(): SIMCard_IMEI {
  return { TAC: "", imei: "" };
}

export const SIMCard_IMEI = {
  encode(message: SIMCard_IMEI, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.TAC !== "") {
      writer.uint32(10).string(message.TAC);
    }
    if (message.imei !== "") {
      writer.uint32(18).string(message.imei);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SIMCard_IMEI {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSIMCard_IMEI();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.TAC = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.imei = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SIMCard_IMEI {
    return { TAC: isSet(object.TAC) ? String(object.TAC) : "", imei: isSet(object.imei) ? String(object.imei) : "" };
  },

  toJSON(message: SIMCard_IMEI): unknown {
    const obj: any = {};
    message.TAC !== undefined && (obj.TAC = message.TAC);
    message.imei !== undefined && (obj.imei = message.imei);
    return obj;
  },

  create<I extends Exact<DeepPartial<SIMCard_IMEI>, I>>(base?: I): SIMCard_IMEI {
    return SIMCard_IMEI.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<SIMCard_IMEI>, I>>(object: I): SIMCard_IMEI {
    const message = createBaseSIMCard_IMEI();
    message.TAC = object.TAC ?? "";
    message.imei = object.imei ?? "";
    return message;
  },
};

function createBaseSIMCard_MEID(): SIMCard_MEID {
  return { RegionCode: "", ManufacturerCode: "", meid: "" };
}

export const SIMCard_MEID = {
  encode(message: SIMCard_MEID, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.RegionCode !== "") {
      writer.uint32(10).string(message.RegionCode);
    }
    if (message.ManufacturerCode !== "") {
      writer.uint32(18).string(message.ManufacturerCode);
    }
    if (message.meid !== "") {
      writer.uint32(26).string(message.meid);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SIMCard_MEID {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSIMCard_MEID();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.RegionCode = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.ManufacturerCode = reader.string();
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.meid = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SIMCard_MEID {
    return {
      RegionCode: isSet(object.RegionCode) ? String(object.RegionCode) : "",
      ManufacturerCode: isSet(object.ManufacturerCode) ? String(object.ManufacturerCode) : "",
      meid: isSet(object.meid) ? String(object.meid) : "",
    };
  },

  toJSON(message: SIMCard_MEID): unknown {
    const obj: any = {};
    message.RegionCode !== undefined && (obj.RegionCode = message.RegionCode);
    message.ManufacturerCode !== undefined && (obj.ManufacturerCode = message.ManufacturerCode);
    message.meid !== undefined && (obj.meid = message.meid);
    return obj;
  },

  create<I extends Exact<DeepPartial<SIMCard_MEID>, I>>(base?: I): SIMCard_MEID {
    return SIMCard_MEID.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<SIMCard_MEID>, I>>(object: I): SIMCard_MEID {
    const message = createBaseSIMCard_MEID();
    message.RegionCode = object.RegionCode ?? "";
    message.ManufacturerCode = object.ManufacturerCode ?? "";
    message.meid = object.meid ?? "";
    return message;
  },
};

function createBaseMAC(): MAC {
  return { OUI: "", address: "" };
}

export const MAC = {
  encode(message: MAC, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.OUI !== "") {
      writer.uint32(10).string(message.OUI);
    }
    if (message.address !== "") {
      writer.uint32(18).string(message.address);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MAC {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMAC();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.OUI = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.address = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MAC {
    return {
      OUI: isSet(object.OUI) ? String(object.OUI) : "",
      address: isSet(object.address) ? String(object.address) : "",
    };
  },

  toJSON(message: MAC): unknown {
    const obj: any = {};
    message.OUI !== undefined && (obj.OUI = message.OUI);
    message.address !== undefined && (obj.address = message.address);
    return obj;
  },

  create<I extends Exact<DeepPartial<MAC>, I>>(base?: I): MAC {
    return MAC.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<MAC>, I>>(object: I): MAC {
    const message = createBaseMAC();
    message.OUI = object.OUI ?? "";
    message.address = object.address ?? "";
    return message;
  },
};

function createBaseTimezone(): Timezone {
  return { name: "" };
}

export const Timezone = {
  encode(message: Timezone, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Timezone {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTimezone();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Timezone {
    return { name: isSet(object.name) ? String(object.name) : "" };
  },

  toJSON(message: Timezone): unknown {
    const obj: any = {};
    message.name !== undefined && (obj.name = message.name);
    return obj;
  },

  create<I extends Exact<DeepPartial<Timezone>, I>>(base?: I): Timezone {
    return Timezone.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<Timezone>, I>>(object: I): Timezone {
    const message = createBaseTimezone();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseScreenData(): ScreenData {
  return { density: 0, resolutionHorizontal: 0, resolutionVertical: 0 };
}

export const ScreenData = {
  encode(message: ScreenData, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.density !== 0) {
      writer.uint32(8).int32(message.density);
    }
    if (message.resolutionHorizontal !== 0) {
      writer.uint32(16).int32(message.resolutionHorizontal);
    }
    if (message.resolutionVertical !== 0) {
      writer.uint32(24).int32(message.resolutionVertical);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ScreenData {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseScreenData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.density = reader.int32();
          continue;
        case 2:
          if (tag != 16) {
            break;
          }

          message.resolutionHorizontal = reader.int32();
          continue;
        case 3:
          if (tag != 24) {
            break;
          }

          message.resolutionVertical = reader.int32();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ScreenData {
    return {
      density: isSet(object.density) ? Number(object.density) : 0,
      resolutionHorizontal: isSet(object.resolutionHorizontal) ? Number(object.resolutionHorizontal) : 0,
      resolutionVertical: isSet(object.resolutionVertical) ? Number(object.resolutionVertical) : 0,
    };
  },

  toJSON(message: ScreenData): unknown {
    const obj: any = {};
    message.density !== undefined && (obj.density = Math.round(message.density));
    message.resolutionHorizontal !== undefined && (obj.resolutionHorizontal = Math.round(message.resolutionHorizontal));
    message.resolutionVertical !== undefined && (obj.resolutionVertical = Math.round(message.resolutionVertical));
    return obj;
  },

  create<I extends Exact<DeepPartial<ScreenData>, I>>(base?: I): ScreenData {
    return ScreenData.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<ScreenData>, I>>(object: I): ScreenData {
    const message = createBaseScreenData();
    message.density = object.density ?? 0;
    message.resolutionHorizontal = object.resolutionHorizontal ?? 0;
    message.resolutionVertical = object.resolutionVertical ?? 0;
    return message;
  },
};

function createBaseCPUData(): CPUData {
  return { arch: 0, archName: "", model: "", brand: "", board: "", abiList: [] };
}

export const CPUData = {
  encode(message: CPUData, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.arch !== 0) {
      writer.uint32(8).int32(message.arch);
    }
    if (message.archName !== "") {
      writer.uint32(18).string(message.archName);
    }
    if (message.model !== "") {
      writer.uint32(26).string(message.model);
    }
    if (message.brand !== "") {
      writer.uint32(34).string(message.brand);
    }
    if (message.board !== "") {
      writer.uint32(42).string(message.board);
    }
    for (const v of message.abiList) {
      writer.uint32(50).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CPUData {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCPUData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.arch = reader.int32() as any;
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.archName = reader.string();
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.model = reader.string();
          continue;
        case 4:
          if (tag != 34) {
            break;
          }

          message.brand = reader.string();
          continue;
        case 5:
          if (tag != 42) {
            break;
          }

          message.board = reader.string();
          continue;
        case 6:
          if (tag != 50) {
            break;
          }

          message.abiList.push(reader.string());
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CPUData {
    return {
      arch: isSet(object.arch) ? cPUData_ArchitectureFromJSON(object.arch) : 0,
      archName: isSet(object.archName) ? String(object.archName) : "",
      model: isSet(object.model) ? String(object.model) : "",
      brand: isSet(object.brand) ? String(object.brand) : "",
      board: isSet(object.board) ? String(object.board) : "",
      abiList: Array.isArray(object?.abiList) ? object.abiList.map((e: any) => String(e)) : [],
    };
  },

  toJSON(message: CPUData): unknown {
    const obj: any = {};
    message.arch !== undefined && (obj.arch = cPUData_ArchitectureToJSON(message.arch));
    message.archName !== undefined && (obj.archName = message.archName);
    message.model !== undefined && (obj.model = message.model);
    message.brand !== undefined && (obj.brand = message.brand);
    message.board !== undefined && (obj.board = message.board);
    if (message.abiList) {
      obj.abiList = message.abiList.map((e) => e);
    } else {
      obj.abiList = [];
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CPUData>, I>>(base?: I): CPUData {
    return CPUData.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<CPUData>, I>>(object: I): CPUData {
    const message = createBaseCPUData();
    message.arch = object.arch ?? 0;
    message.archName = object.archName ?? "";
    message.model = object.model ?? "";
    message.brand = object.brand ?? "";
    message.board = object.board ?? "";
    message.abiList = object.abiList?.map((e) => e) || [];
    return message;
  },
};

function createBaseAndroidDevice(): AndroidDevice {
  return {
    id: undefined,
    version: 0,
    build: undefined,
    software: undefined,
    screen: undefined,
    cpu: undefined,
    locale: undefined,
    location: undefined,
    timezone: undefined,
    macAddress: undefined,
    simSlots: [],
  };
}

export const AndroidDevice = {
  encode(message: AndroidDevice, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== undefined) {
      AndroidDevice_ID.encode(message.id, writer.uint32(10).fork()).ldelim();
    }
    if (message.version !== 0) {
      writer.uint32(16).int32(message.version);
    }
    if (message.build !== undefined) {
      AndroidDevice_BuildData.encode(message.build, writer.uint32(26).fork()).ldelim();
    }
    if (message.software !== undefined) {
      AndroidDevice_DeviceSoftware.encode(message.software, writer.uint32(34).fork()).ldelim();
    }
    if (message.screen !== undefined) {
      ScreenData.encode(message.screen, writer.uint32(42).fork()).ldelim();
    }
    if (message.cpu !== undefined) {
      CPUData.encode(message.cpu, writer.uint32(50).fork()).ldelim();
    }
    if (message.locale !== undefined) {
      Locale.encode(message.locale, writer.uint32(58).fork()).ldelim();
    }
    if (message.location !== undefined) {
      GPSLocation.encode(message.location, writer.uint32(66).fork()).ldelim();
    }
    if (message.timezone !== undefined) {
      Timezone.encode(message.timezone, writer.uint32(74).fork()).ldelim();
    }
    if (message.macAddress !== undefined) {
      MAC.encode(message.macAddress, writer.uint32(82).fork()).ldelim();
    }
    for (const v of message.simSlots) {
      SIMCard.encode(v!, writer.uint32(90).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AndroidDevice {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAndroidDevice();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.id = AndroidDevice_ID.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag != 16) {
            break;
          }

          message.version = reader.int32() as any;
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.build = AndroidDevice_BuildData.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag != 34) {
            break;
          }

          message.software = AndroidDevice_DeviceSoftware.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag != 42) {
            break;
          }

          message.screen = ScreenData.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag != 50) {
            break;
          }

          message.cpu = CPUData.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag != 58) {
            break;
          }

          message.locale = Locale.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag != 66) {
            break;
          }

          message.location = GPSLocation.decode(reader, reader.uint32());
          continue;
        case 9:
          if (tag != 74) {
            break;
          }

          message.timezone = Timezone.decode(reader, reader.uint32());
          continue;
        case 10:
          if (tag != 82) {
            break;
          }

          message.macAddress = MAC.decode(reader, reader.uint32());
          continue;
        case 11:
          if (tag != 90) {
            break;
          }

          message.simSlots.push(SIMCard.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AndroidDevice {
    return {
      id: isSet(object.id) ? AndroidDevice_ID.fromJSON(object.id) : undefined,
      version: isSet(object.version) ? androidDevice_VersionFromJSON(object.version) : 0,
      build: isSet(object.build) ? AndroidDevice_BuildData.fromJSON(object.build) : undefined,
      software: isSet(object.software) ? AndroidDevice_DeviceSoftware.fromJSON(object.software) : undefined,
      screen: isSet(object.screen) ? ScreenData.fromJSON(object.screen) : undefined,
      cpu: isSet(object.cpu) ? CPUData.fromJSON(object.cpu) : undefined,
      locale: isSet(object.locale) ? Locale.fromJSON(object.locale) : undefined,
      location: isSet(object.location) ? GPSLocation.fromJSON(object.location) : undefined,
      timezone: isSet(object.timezone) ? Timezone.fromJSON(object.timezone) : undefined,
      macAddress: isSet(object.macAddress) ? MAC.fromJSON(object.macAddress) : undefined,
      simSlots: Array.isArray(object?.simSlots) ? object.simSlots.map((e: any) => SIMCard.fromJSON(e)) : [],
    };
  },

  toJSON(message: AndroidDevice): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = message.id ? AndroidDevice_ID.toJSON(message.id) : undefined);
    message.version !== undefined && (obj.version = androidDevice_VersionToJSON(message.version));
    message.build !== undefined &&
      (obj.build = message.build ? AndroidDevice_BuildData.toJSON(message.build) : undefined);
    message.software !== undefined &&
      (obj.software = message.software ? AndroidDevice_DeviceSoftware.toJSON(message.software) : undefined);
    message.screen !== undefined && (obj.screen = message.screen ? ScreenData.toJSON(message.screen) : undefined);
    message.cpu !== undefined && (obj.cpu = message.cpu ? CPUData.toJSON(message.cpu) : undefined);
    message.locale !== undefined && (obj.locale = message.locale ? Locale.toJSON(message.locale) : undefined);
    message.location !== undefined &&
      (obj.location = message.location ? GPSLocation.toJSON(message.location) : undefined);
    message.timezone !== undefined && (obj.timezone = message.timezone ? Timezone.toJSON(message.timezone) : undefined);
    message.macAddress !== undefined &&
      (obj.macAddress = message.macAddress ? MAC.toJSON(message.macAddress) : undefined);
    if (message.simSlots) {
      obj.simSlots = message.simSlots.map((e) => e ? SIMCard.toJSON(e) : undefined);
    } else {
      obj.simSlots = [];
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AndroidDevice>, I>>(base?: I): AndroidDevice {
    return AndroidDevice.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<AndroidDevice>, I>>(object: I): AndroidDevice {
    const message = createBaseAndroidDevice();
    message.id = (object.id !== undefined && object.id !== null) ? AndroidDevice_ID.fromPartial(object.id) : undefined;
    message.version = object.version ?? 0;
    message.build = (object.build !== undefined && object.build !== null)
      ? AndroidDevice_BuildData.fromPartial(object.build)
      : undefined;
    message.software = (object.software !== undefined && object.software !== null)
      ? AndroidDevice_DeviceSoftware.fromPartial(object.software)
      : undefined;
    message.screen = (object.screen !== undefined && object.screen !== null)
      ? ScreenData.fromPartial(object.screen)
      : undefined;
    message.cpu = (object.cpu !== undefined && object.cpu !== null) ? CPUData.fromPartial(object.cpu) : undefined;
    message.locale = (object.locale !== undefined && object.locale !== null)
      ? Locale.fromPartial(object.locale)
      : undefined;
    message.location = (object.location !== undefined && object.location !== null)
      ? GPSLocation.fromPartial(object.location)
      : undefined;
    message.timezone = (object.timezone !== undefined && object.timezone !== null)
      ? Timezone.fromPartial(object.timezone)
      : undefined;
    message.macAddress = (object.macAddress !== undefined && object.macAddress !== null)
      ? MAC.fromPartial(object.macAddress)
      : undefined;
    message.simSlots = object.simSlots?.map((e) => SIMCard.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAndroidDevice_ID(): AndroidDevice_ID {
  return { id: 0 };
}

export const AndroidDevice_ID = {
  encode(message: AndroidDevice_ID, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).uint64(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AndroidDevice_ID {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAndroidDevice_ID();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 8) {
            break;
          }

          message.id = longToNumber(reader.uint64() as Long);
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AndroidDevice_ID {
    return { id: isSet(object.id) ? Number(object.id) : 0 };
  },

  toJSON(message: AndroidDevice_ID): unknown {
    const obj: any = {};
    message.id !== undefined && (obj.id = Math.round(message.id));
    return obj;
  },

  create<I extends Exact<DeepPartial<AndroidDevice_ID>, I>>(base?: I): AndroidDevice_ID {
    return AndroidDevice_ID.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<AndroidDevice_ID>, I>>(object: I): AndroidDevice_ID {
    const message = createBaseAndroidDevice_ID();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseAndroidDevice_BuildData(): AndroidDevice_BuildData {
  return {
    board: "",
    bootloader: "",
    brand: "",
    device: "",
    display: "",
    fingerprint: "",
    hardware: "",
    id: "",
    manufacturer: "",
    model: "",
    odmSku: "",
    product: "",
    sku: "",
    socManufacturer: "",
    socModel: "",
    tags: "",
    type: "",
    incrementalVersion: "",
  };
}

export const AndroidDevice_BuildData = {
  encode(message: AndroidDevice_BuildData, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.board !== "") {
      writer.uint32(10).string(message.board);
    }
    if (message.bootloader !== "") {
      writer.uint32(18).string(message.bootloader);
    }
    if (message.brand !== "") {
      writer.uint32(26).string(message.brand);
    }
    if (message.device !== "") {
      writer.uint32(34).string(message.device);
    }
    if (message.display !== "") {
      writer.uint32(42).string(message.display);
    }
    if (message.fingerprint !== "") {
      writer.uint32(50).string(message.fingerprint);
    }
    if (message.hardware !== "") {
      writer.uint32(58).string(message.hardware);
    }
    if (message.id !== "") {
      writer.uint32(66).string(message.id);
    }
    if (message.manufacturer !== "") {
      writer.uint32(74).string(message.manufacturer);
    }
    if (message.model !== "") {
      writer.uint32(82).string(message.model);
    }
    if (message.odmSku !== "") {
      writer.uint32(90).string(message.odmSku);
    }
    if (message.product !== "") {
      writer.uint32(98).string(message.product);
    }
    if (message.sku !== "") {
      writer.uint32(106).string(message.sku);
    }
    if (message.socManufacturer !== "") {
      writer.uint32(114).string(message.socManufacturer);
    }
    if (message.socModel !== "") {
      writer.uint32(122).string(message.socModel);
    }
    if (message.tags !== "") {
      writer.uint32(130).string(message.tags);
    }
    if (message.type !== "") {
      writer.uint32(138).string(message.type);
    }
    if (message.incrementalVersion !== "") {
      writer.uint32(146).string(message.incrementalVersion);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AndroidDevice_BuildData {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAndroidDevice_BuildData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.board = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.bootloader = reader.string();
          continue;
        case 3:
          if (tag != 26) {
            break;
          }

          message.brand = reader.string();
          continue;
        case 4:
          if (tag != 34) {
            break;
          }

          message.device = reader.string();
          continue;
        case 5:
          if (tag != 42) {
            break;
          }

          message.display = reader.string();
          continue;
        case 6:
          if (tag != 50) {
            break;
          }

          message.fingerprint = reader.string();
          continue;
        case 7:
          if (tag != 58) {
            break;
          }

          message.hardware = reader.string();
          continue;
        case 8:
          if (tag != 66) {
            break;
          }

          message.id = reader.string();
          continue;
        case 9:
          if (tag != 74) {
            break;
          }

          message.manufacturer = reader.string();
          continue;
        case 10:
          if (tag != 82) {
            break;
          }

          message.model = reader.string();
          continue;
        case 11:
          if (tag != 90) {
            break;
          }

          message.odmSku = reader.string();
          continue;
        case 12:
          if (tag != 98) {
            break;
          }

          message.product = reader.string();
          continue;
        case 13:
          if (tag != 106) {
            break;
          }

          message.sku = reader.string();
          continue;
        case 14:
          if (tag != 114) {
            break;
          }

          message.socManufacturer = reader.string();
          continue;
        case 15:
          if (tag != 122) {
            break;
          }

          message.socModel = reader.string();
          continue;
        case 16:
          if (tag != 130) {
            break;
          }

          message.tags = reader.string();
          continue;
        case 17:
          if (tag != 138) {
            break;
          }

          message.type = reader.string();
          continue;
        case 18:
          if (tag != 146) {
            break;
          }

          message.incrementalVersion = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AndroidDevice_BuildData {
    return {
      board: isSet(object.board) ? String(object.board) : "",
      bootloader: isSet(object.bootloader) ? String(object.bootloader) : "",
      brand: isSet(object.brand) ? String(object.brand) : "",
      device: isSet(object.device) ? String(object.device) : "",
      display: isSet(object.display) ? String(object.display) : "",
      fingerprint: isSet(object.fingerprint) ? String(object.fingerprint) : "",
      hardware: isSet(object.hardware) ? String(object.hardware) : "",
      id: isSet(object.id) ? String(object.id) : "",
      manufacturer: isSet(object.manufacturer) ? String(object.manufacturer) : "",
      model: isSet(object.model) ? String(object.model) : "",
      odmSku: isSet(object.odmSku) ? String(object.odmSku) : "",
      product: isSet(object.product) ? String(object.product) : "",
      sku: isSet(object.sku) ? String(object.sku) : "",
      socManufacturer: isSet(object.socManufacturer) ? String(object.socManufacturer) : "",
      socModel: isSet(object.socModel) ? String(object.socModel) : "",
      tags: isSet(object.tags) ? String(object.tags) : "",
      type: isSet(object.type) ? String(object.type) : "",
      incrementalVersion: isSet(object.incrementalVersion) ? String(object.incrementalVersion) : "",
    };
  },

  toJSON(message: AndroidDevice_BuildData): unknown {
    const obj: any = {};
    message.board !== undefined && (obj.board = message.board);
    message.bootloader !== undefined && (obj.bootloader = message.bootloader);
    message.brand !== undefined && (obj.brand = message.brand);
    message.device !== undefined && (obj.device = message.device);
    message.display !== undefined && (obj.display = message.display);
    message.fingerprint !== undefined && (obj.fingerprint = message.fingerprint);
    message.hardware !== undefined && (obj.hardware = message.hardware);
    message.id !== undefined && (obj.id = message.id);
    message.manufacturer !== undefined && (obj.manufacturer = message.manufacturer);
    message.model !== undefined && (obj.model = message.model);
    message.odmSku !== undefined && (obj.odmSku = message.odmSku);
    message.product !== undefined && (obj.product = message.product);
    message.sku !== undefined && (obj.sku = message.sku);
    message.socManufacturer !== undefined && (obj.socManufacturer = message.socManufacturer);
    message.socModel !== undefined && (obj.socModel = message.socModel);
    message.tags !== undefined && (obj.tags = message.tags);
    message.type !== undefined && (obj.type = message.type);
    message.incrementalVersion !== undefined && (obj.incrementalVersion = message.incrementalVersion);
    return obj;
  },

  create<I extends Exact<DeepPartial<AndroidDevice_BuildData>, I>>(base?: I): AndroidDevice_BuildData {
    return AndroidDevice_BuildData.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<AndroidDevice_BuildData>, I>>(object: I): AndroidDevice_BuildData {
    const message = createBaseAndroidDevice_BuildData();
    message.board = object.board ?? "";
    message.bootloader = object.bootloader ?? "";
    message.brand = object.brand ?? "";
    message.device = object.device ?? "";
    message.display = object.display ?? "";
    message.fingerprint = object.fingerprint ?? "";
    message.hardware = object.hardware ?? "";
    message.id = object.id ?? "";
    message.manufacturer = object.manufacturer ?? "";
    message.model = object.model ?? "";
    message.odmSku = object.odmSku ?? "";
    message.product = object.product ?? "";
    message.sku = object.sku ?? "";
    message.socManufacturer = object.socManufacturer ?? "";
    message.socModel = object.socModel ?? "";
    message.tags = object.tags ?? "";
    message.type = object.type ?? "";
    message.incrementalVersion = object.incrementalVersion ?? "";
    return message;
  },
};

function createBaseAndroidDevice_DeviceSoftware(): AndroidDevice_DeviceSoftware {
  return { softwareMetaData: {}, appMetaData: {} };
}

export const AndroidDevice_DeviceSoftware = {
  encode(message: AndroidDevice_DeviceSoftware, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    Object.entries(message.softwareMetaData).forEach(([key, value]) => {
      AndroidDevice_DeviceSoftware_SoftwareMetaDataEntry.encode({ key: key as any, value }, writer.uint32(10).fork())
        .ldelim();
    });
    Object.entries(message.appMetaData).forEach(([key, value]) => {
      AndroidDevice_DeviceSoftware_AppMetaDataEntry.encode({ key: key as any, value }, writer.uint32(18).fork())
        .ldelim();
    });
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AndroidDevice_DeviceSoftware {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAndroidDevice_DeviceSoftware();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          const entry1 = AndroidDevice_DeviceSoftware_SoftwareMetaDataEntry.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.softwareMetaData[entry1.key] = entry1.value;
          }
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          const entry2 = AndroidDevice_DeviceSoftware_AppMetaDataEntry.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            message.appMetaData[entry2.key] = entry2.value;
          }
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AndroidDevice_DeviceSoftware {
    return {
      softwareMetaData: isObject(object.softwareMetaData)
        ? Object.entries(object.softwareMetaData).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      appMetaData: isObject(object.appMetaData)
        ? Object.entries(object.appMetaData).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: AndroidDevice_DeviceSoftware): unknown {
    const obj: any = {};
    obj.softwareMetaData = {};
    if (message.softwareMetaData) {
      Object.entries(message.softwareMetaData).forEach(([k, v]) => {
        obj.softwareMetaData[k] = v;
      });
    }
    obj.appMetaData = {};
    if (message.appMetaData) {
      Object.entries(message.appMetaData).forEach(([k, v]) => {
        obj.appMetaData[k] = v;
      });
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AndroidDevice_DeviceSoftware>, I>>(base?: I): AndroidDevice_DeviceSoftware {
    return AndroidDevice_DeviceSoftware.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<AndroidDevice_DeviceSoftware>, I>>(object: I): AndroidDevice_DeviceSoftware {
    const message = createBaseAndroidDevice_DeviceSoftware();
    message.softwareMetaData = Object.entries(object.softwareMetaData ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = String(value);
        }
        return acc;
      },
      {},
    );
    message.appMetaData = Object.entries(object.appMetaData ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = String(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseAndroidDevice_DeviceSoftware_SoftwareMetaDataEntry(): AndroidDevice_DeviceSoftware_SoftwareMetaDataEntry {
  return { key: "", value: "" };
}

export const AndroidDevice_DeviceSoftware_SoftwareMetaDataEntry = {
  encode(
    message: AndroidDevice_DeviceSoftware_SoftwareMetaDataEntry,
    writer: _m0.Writer = _m0.Writer.create(),
  ): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AndroidDevice_DeviceSoftware_SoftwareMetaDataEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAndroidDevice_DeviceSoftware_SoftwareMetaDataEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AndroidDevice_DeviceSoftware_SoftwareMetaDataEntry {
    return { key: isSet(object.key) ? String(object.key) : "", value: isSet(object.value) ? String(object.value) : "" };
  },

  toJSON(message: AndroidDevice_DeviceSoftware_SoftwareMetaDataEntry): unknown {
    const obj: any = {};
    message.key !== undefined && (obj.key = message.key);
    message.value !== undefined && (obj.value = message.value);
    return obj;
  },

  create<I extends Exact<DeepPartial<AndroidDevice_DeviceSoftware_SoftwareMetaDataEntry>, I>>(
    base?: I,
  ): AndroidDevice_DeviceSoftware_SoftwareMetaDataEntry {
    return AndroidDevice_DeviceSoftware_SoftwareMetaDataEntry.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<AndroidDevice_DeviceSoftware_SoftwareMetaDataEntry>, I>>(
    object: I,
  ): AndroidDevice_DeviceSoftware_SoftwareMetaDataEntry {
    const message = createBaseAndroidDevice_DeviceSoftware_SoftwareMetaDataEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseAndroidDevice_DeviceSoftware_AppMetaDataEntry(): AndroidDevice_DeviceSoftware_AppMetaDataEntry {
  return { key: "", value: "" };
}

export const AndroidDevice_DeviceSoftware_AppMetaDataEntry = {
  encode(message: AndroidDevice_DeviceSoftware_AppMetaDataEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): AndroidDevice_DeviceSoftware_AppMetaDataEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAndroidDevice_DeviceSoftware_AppMetaDataEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag != 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag != 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) == 4 || tag == 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AndroidDevice_DeviceSoftware_AppMetaDataEntry {
    return { key: isSet(object.key) ? String(object.key) : "", value: isSet(object.value) ? String(object.value) : "" };
  },

  toJSON(message: AndroidDevice_DeviceSoftware_AppMetaDataEntry): unknown {
    const obj: any = {};
    message.key !== undefined && (obj.key = message.key);
    message.value !== undefined && (obj.value = message.value);
    return obj;
  },

  create<I extends Exact<DeepPartial<AndroidDevice_DeviceSoftware_AppMetaDataEntry>, I>>(
    base?: I,
  ): AndroidDevice_DeviceSoftware_AppMetaDataEntry {
    return AndroidDevice_DeviceSoftware_AppMetaDataEntry.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<AndroidDevice_DeviceSoftware_AppMetaDataEntry>, I>>(
    object: I,
  ): AndroidDevice_DeviceSoftware_AppMetaDataEntry {
    const message = createBaseAndroidDevice_DeviceSoftware_AppMetaDataEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

declare var self: any | undefined;
declare var window: any | undefined;
declare var global: any | undefined;
var tsProtoGlobalThis: any = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(long: Long): number {
  if (long.gt(Number.MAX_SAFE_INTEGER)) {
    throw new tsProtoGlobalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  return long.toNumber();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
